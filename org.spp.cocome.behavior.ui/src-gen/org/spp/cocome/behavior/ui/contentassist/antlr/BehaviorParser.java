/*
* generated by Xtext
*/
package org.spp.cocome.behavior.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.spp.cocome.behavior.services.BehaviorGrammarAccess;

public class BehaviorParser extends AbstractContentAssistParser {
	
	@Inject
	private BehaviorGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.spp.cocome.behavior.ui.contentassist.antlr.internal.InternalBehaviorParser createParser() {
		org.spp.cocome.behavior.ui.contentassist.antlr.internal.InternalBehaviorParser result = new org.spp.cocome.behavior.ui.contentassist.antlr.internal.InternalBehaviorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBehaviorModelAccess().getAlternatives_2(), "rule__BehaviorModel__Alternatives_2");
					put(grammarAccess.getComponentImplAccess().getLocalDeclarationsAlternatives_4_0(), "rule__ComponentImpl__LocalDeclarationsAlternatives_4_0");
					put(grammarAccess.getVariableDeclAccess().getModifierAlternatives_0_0(), "rule__VariableDecl__ModifierAlternatives_0_0");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getRelationalExpressionAccess().getFeatureAlternatives_1_0_0_1_0(), "rule__RelationalExpression__FeatureAlternatives_1_0_0_1_0");
					put(grammarAccess.getAdditiveExpressionAccess().getFeatureAlternatives_1_0_0_1_0(), "rule__AdditiveExpression__FeatureAlternatives_1_0_0_1_0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getFeatureAlternatives_1_0_0_1_0(), "rule__MultiplicativeExpression__FeatureAlternatives_1_0_0_1_0");
					put(grammarAccess.getUnaryOperationAccess().getAlternatives(), "rule__UnaryOperation__Alternatives");
					put(grammarAccess.getPostfixOperationAccess().getFeatureAlternatives_1_0_1_0(), "rule__PostfixOperation__FeatureAlternatives_1_0_1_0");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getDeclarationTypeReferenceAccess().getAlternatives(), "rule__DeclarationTypeReference__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getBOOLEANAccess().getAlternatives(), "rule__BOOLEAN__Alternatives");
					put(grammarAccess.getNUMBERAccess().getAlternatives(), "rule__NUMBER__Alternatives");
					put(grammarAccess.getNUMBERAccess().getAlternatives_0_0(), "rule__NUMBER__Alternatives_0_0");
					put(grammarAccess.getComponentKindAccess().getAlternatives(), "rule__ComponentKind__Alternatives");
					put(grammarAccess.getBehaviorModelAccess().getGroup(), "rule__BehaviorModel__Group__0");
					put(grammarAccess.getRepositoryReferenceAccess().getGroup(), "rule__RepositoryReference__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getComponentImplAccess().getGroup(), "rule__ComponentImpl__Group__0");
					put(grammarAccess.getComponentImplAccess().getGroup_5(), "rule__ComponentImpl__Group_5__0");
					put(grammarAccess.getComponentImplAccess().getGroup_6(), "rule__ComponentImpl__Group_6__0");
					put(grammarAccess.getLifeCycleMethodAccess().getGroup(), "rule__LifeCycleMethod__Group__0");
					put(grammarAccess.getVariableDeclAccess().getGroup(), "rule__VariableDecl__Group__0");
					put(grammarAccess.getConstantDeclAccess().getGroup(), "rule__ConstantDecl__Group__0");
					put(grammarAccess.getInterfaceRealizationAccess().getGroup(), "rule__InterfaceRealization__Group__0");
					put(grammarAccess.getMethodImplAccess().getGroup(), "rule__MethodImpl__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_5(), "rule__IfStatement__Group_5__0");
					put(grammarAccess.getBlockStatementAccess().getGroup(), "rule__BlockStatement__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getLoopStatementAccess().getGroup(), "rule__LoopStatement__Group__0");
					put(grammarAccess.getVariableCallAccess().getGroup(), "rule__VariableCall__Group__0");
					put(grammarAccess.getVariableCallAccess().getGroup_1(), "rule__VariableCall__Group_1__0");
					put(grammarAccess.getVariableCallAccess().getGroup_2(), "rule__VariableCall__Group_2__0");
					put(grammarAccess.getPropertyCallAccess().getGroup(), "rule__PropertyCall__Group__0");
					put(grammarAccess.getPropertyCallAccess().getGroup_1(), "rule__PropertyCall__Group_1__0");
					put(grammarAccess.getPropertyCallAccess().getGroup_2(), "rule__PropertyCall__Group_2__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_0(), "rule__Expression__Group_1_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_0_0(), "rule__Expression__Group_1_0_0__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1_0(), "rule__AndExpression__Group_1_0__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1_0_0(), "rule__AndExpression__Group_1_0_0__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1_0(), "rule__RelationalExpression__Group_1_0__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0(), "rule__RelationalExpression__Group_1_0_0__0");
					put(grammarAccess.getOtherExpressionAccess().getGroup(), "rule__OtherExpression__Group__0");
					put(grammarAccess.getOtherExpressionAccess().getGroup_1(), "rule__OtherExpression__Group_1__0");
					put(grammarAccess.getOtherExpressionAccess().getGroup_1_0(), "rule__OtherExpression__Group_1_0__0");
					put(grammarAccess.getOtherExpressionAccess().getGroup_1_0_0(), "rule__OtherExpression__Group_1_0_0__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0(), "rule__AdditiveExpression__Group_1_0__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_0(), "rule__AdditiveExpression__Group_1_0_0__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0(), "rule__MultiplicativeExpression__Group_1_0__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_0(), "rule__MultiplicativeExpression__Group_1_0_0__0");
					put(grammarAccess.getUnaryOperationAccess().getGroup_0(), "rule__UnaryOperation__Group_0__0");
					put(grammarAccess.getCastedExpressionAccess().getGroup(), "rule__CastedExpression__Group__0");
					put(grammarAccess.getCastedExpressionAccess().getGroup_1(), "rule__CastedExpression__Group_1__0");
					put(grammarAccess.getCastedExpressionAccess().getGroup_1_0(), "rule__CastedExpression__Group_1_0__0");
					put(grammarAccess.getCastedExpressionAccess().getGroup_1_0_0(), "rule__CastedExpression__Group_1_0_0__0");
					put(grammarAccess.getPostfixOperationAccess().getGroup(), "rule__PostfixOperation__Group__0");
					put(grammarAccess.getPostfixOperationAccess().getGroup_1(), "rule__PostfixOperation__Group_1__0");
					put(grammarAccess.getPostfixOperationAccess().getGroup_1_0(), "rule__PostfixOperation__Group_1_0__0");
					put(grammarAccess.getInstantiationExpressionAccess().getGroup(), "rule__InstantiationExpression__Group__0");
					put(grammarAccess.getCollectionTypeAccess().getGroup(), "rule__CollectionType__Group__0");
					put(grammarAccess.getMapTypeAccess().getGroup(), "rule__MapType__Group__0");
					put(grammarAccess.getMapTypeAccess().getGroup_2(), "rule__MapType__Group_2__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1(), "rule__QualifiedNameWithWildcard__Group_1__0");
					put(grammarAccess.getNUMBERAccess().getGroup_0(), "rule__NUMBER__Group_0__0");
					put(grammarAccess.getNUMBERAccess().getGroup_1(), "rule__NUMBER__Group_1__0");
					put(grammarAccess.getBehaviorModelAccess().getNameAssignment_1(), "rule__BehaviorModel__NameAssignment_1");
					put(grammarAccess.getBehaviorModelAccess().getImportsAssignment_2_0(), "rule__BehaviorModel__ImportsAssignment_2_0");
					put(grammarAccess.getBehaviorModelAccess().getRepositoriesAssignment_2_1(), "rule__BehaviorModel__RepositoriesAssignment_2_1");
					put(grammarAccess.getBehaviorModelAccess().getComponentImplAssignment_3(), "rule__BehaviorModel__ComponentImplAssignment_3");
					put(grammarAccess.getRepositoryReferenceAccess().getReferenceAssignment_1(), "rule__RepositoryReference__ReferenceAssignment_1");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getComponentImplAccess().getKindAssignment_1(), "rule__ComponentImpl__KindAssignment_1");
					put(grammarAccess.getComponentImplAccess().getRefComponentAssignment_2(), "rule__ComponentImpl__RefComponentAssignment_2");
					put(grammarAccess.getComponentImplAccess().getLocalDeclarationsAssignment_4(), "rule__ComponentImpl__LocalDeclarationsAssignment_4");
					put(grammarAccess.getComponentImplAccess().getPostConstructAssignment_5_1(), "rule__ComponentImpl__PostConstructAssignment_5_1");
					put(grammarAccess.getComponentImplAccess().getPreDestroyAssignment_6_1(), "rule__ComponentImpl__PreDestroyAssignment_6_1");
					put(grammarAccess.getComponentImplAccess().getInterfacesAssignment_7(), "rule__ComponentImpl__InterfacesAssignment_7");
					put(grammarAccess.getLifeCycleMethodAccess().getBodyAssignment_1(), "rule__LifeCycleMethod__BodyAssignment_1");
					put(grammarAccess.getVariableDeclAccess().getModifierAssignment_0(), "rule__VariableDecl__ModifierAssignment_0");
					put(grammarAccess.getVariableDeclAccess().getTypeAssignment_1(), "rule__VariableDecl__TypeAssignment_1");
					put(grammarAccess.getVariableDeclAccess().getNameAssignment_2(), "rule__VariableDecl__NameAssignment_2");
					put(grammarAccess.getConstantDeclAccess().getNameAssignment_1(), "rule__ConstantDecl__NameAssignment_1");
					put(grammarAccess.getConstantDeclAccess().getValueAssignment_3(), "rule__ConstantDecl__ValueAssignment_3");
					put(grammarAccess.getInterfaceRealizationAccess().getRefInterfaceAssignment_1(), "rule__InterfaceRealization__RefInterfaceAssignment_1");
					put(grammarAccess.getInterfaceRealizationAccess().getMethodsAssignment_2(), "rule__InterfaceRealization__MethodsAssignment_2");
					put(grammarAccess.getMethodImplAccess().getRefMethodAssignment_1(), "rule__MethodImpl__RefMethodAssignment_1");
					put(grammarAccess.getMethodImplAccess().getBodyAssignment_2(), "rule__MethodImpl__BodyAssignment_2");
					put(grammarAccess.getIfStatementAccess().getExprAssignment_2(), "rule__IfStatement__ExprAssignment_2");
					put(grammarAccess.getIfStatementAccess().getIfStatementAssignment_4(), "rule__IfStatement__IfStatementAssignment_4");
					put(grammarAccess.getIfStatementAccess().getElseStatementAssignment_5_1(), "rule__IfStatement__ElseStatementAssignment_5_1");
					put(grammarAccess.getBlockStatementAccess().getStatementsAssignment_2(), "rule__BlockStatement__StatementsAssignment_2");
					put(grammarAccess.getAssignmentAccess().getVariableAssignment_0(), "rule__Assignment__VariableAssignment_0");
					put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
					put(grammarAccess.getLoopStatementAccess().getVariableAssignment_2(), "rule__LoopStatement__VariableAssignment_2");
					put(grammarAccess.getLoopStatementAccess().getExpressionAssignment_4(), "rule__LoopStatement__ExpressionAssignment_4");
					put(grammarAccess.getLoopStatementAccess().getStatementAssignment_6(), "rule__LoopStatement__StatementAssignment_6");
					put(grammarAccess.getVariableCallAccess().getVariableAssignment_0(), "rule__VariableCall__VariableAssignment_0");
					put(grammarAccess.getVariableCallAccess().getIndexAssignment_1_1(), "rule__VariableCall__IndexAssignment_1_1");
					put(grammarAccess.getVariableCallAccess().getSubPropertyAssignment_2_1(), "rule__VariableCall__SubPropertyAssignment_2_1");
					put(grammarAccess.getPropertyCallAccess().getPropertyAssignment_0(), "rule__PropertyCall__PropertyAssignment_0");
					put(grammarAccess.getPropertyCallAccess().getIndexAssignment_1_1(), "rule__PropertyCall__IndexAssignment_1_1");
					put(grammarAccess.getPropertyCallAccess().getSubPropertyAssignment_2_1(), "rule__PropertyCall__SubPropertyAssignment_2_1");
					put(grammarAccess.getExpressionAccess().getFeatureAssignment_1_0_0_1(), "rule__Expression__FeatureAssignment_1_0_0_1");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_1(), "rule__Expression__RightAssignment_1_1");
					put(grammarAccess.getAndExpressionAccess().getFeatureAssignment_1_0_0_1(), "rule__AndExpression__FeatureAssignment_1_0_0_1");
					put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1(), "rule__AndExpression__RightAssignment_1_1");
					put(grammarAccess.getRelationalExpressionAccess().getFeatureAssignment_1_0_0_1(), "rule__RelationalExpression__FeatureAssignment_1_0_0_1");
					put(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_1(), "rule__RelationalExpression__RightAssignment_1_1");
					put(grammarAccess.getOtherExpressionAccess().getFeatureAssignment_1_0_0_1(), "rule__OtherExpression__FeatureAssignment_1_0_0_1");
					put(grammarAccess.getOtherExpressionAccess().getTypeAssignment_1_1(), "rule__OtherExpression__TypeAssignment_1_1");
					put(grammarAccess.getAdditiveExpressionAccess().getFeatureAssignment_1_0_0_1(), "rule__AdditiveExpression__FeatureAssignment_1_0_0_1");
					put(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_1(), "rule__AdditiveExpression__RightAssignment_1_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getFeatureAssignment_1_0_0_1(), "rule__MultiplicativeExpression__FeatureAssignment_1_0_0_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_1(), "rule__MultiplicativeExpression__RightAssignment_1_1");
					put(grammarAccess.getUnaryOperationAccess().getFeatureAssignment_0_1(), "rule__UnaryOperation__FeatureAssignment_0_1");
					put(grammarAccess.getUnaryOperationAccess().getOperandAssignment_0_2(), "rule__UnaryOperation__OperandAssignment_0_2");
					put(grammarAccess.getCastedExpressionAccess().getFeatureAssignment_1_0_0_1(), "rule__CastedExpression__FeatureAssignment_1_0_0_1");
					put(grammarAccess.getCastedExpressionAccess().getTypeAssignment_1_1(), "rule__CastedExpression__TypeAssignment_1_1");
					put(grammarAccess.getPostfixOperationAccess().getFeatureAssignment_1_0_1(), "rule__PostfixOperation__FeatureAssignment_1_0_1");
					put(grammarAccess.getInstantiationExpressionAccess().getTypeAssignment_1(), "rule__InstantiationExpression__TypeAssignment_1");
					put(grammarAccess.getInstantiationExpressionAccess().getParametersAssignment_3(), "rule__InstantiationExpression__ParametersAssignment_3");
					put(grammarAccess.getTypeReferenceAccess().getReferenceAssignment(), "rule__TypeReference__ReferenceAssignment");
					put(grammarAccess.getCollectionTypeAccess().getReferenceAssignment_0(), "rule__CollectionType__ReferenceAssignment_0");
					put(grammarAccess.getCollectionTypeAccess().getSizeAssignment_2(), "rule__CollectionType__SizeAssignment_2");
					put(grammarAccess.getMapTypeAccess().getReferenceAssignment_0(), "rule__MapType__ReferenceAssignment_0");
					put(grammarAccess.getMapTypeAccess().getKeyTypeAssignment_2_0(), "rule__MapType__KeyTypeAssignment_2_0");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getCharLiteralAccess().getValueAssignment(), "rule__CharLiteral__ValueAssignment");
					put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.spp.cocome.behavior.ui.contentassist.antlr.internal.InternalBehaviorParser typedParser = (org.spp.cocome.behavior.ui.contentassist.antlr.internal.InternalBehaviorParser) parser;
			typedParser.entryRuleBehaviorModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public BehaviorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(BehaviorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
