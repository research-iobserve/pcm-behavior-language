/*
* generated by Xtext
*/
grammar InternalBehavior;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.spp.cocome.behavior.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.spp.cocome.behavior.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.spp.cocome.behavior.services.BehaviorGrammarAccess;

}

@parser::members {
 
 	private BehaviorGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(BehaviorGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleBehaviorModel
entryRuleBehaviorModel 
:
{ before(grammarAccess.getBehaviorModelRule()); }
	 ruleBehaviorModel
{ after(grammarAccess.getBehaviorModelRule()); } 
	 EOF 
;

// Rule BehaviorModel
ruleBehaviorModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBehaviorModelAccess().getGroup()); }
(rule__BehaviorModel__Group__0)
{ after(grammarAccess.getBehaviorModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRepositoryReference
entryRuleRepositoryReference 
:
{ before(grammarAccess.getRepositoryReferenceRule()); }
	 ruleRepositoryReference
{ after(grammarAccess.getRepositoryReferenceRule()); } 
	 EOF 
;

// Rule RepositoryReference
ruleRepositoryReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRepositoryReferenceAccess().getGroup()); }
(rule__RepositoryReference__Group__0)
{ after(grammarAccess.getRepositoryReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponentImpl
entryRuleComponentImpl 
:
{ before(grammarAccess.getComponentImplRule()); }
	 ruleComponentImpl
{ after(grammarAccess.getComponentImplRule()); } 
	 EOF 
;

// Rule ComponentImpl
ruleComponentImpl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComponentImplAccess().getGroup()); }
(rule__ComponentImpl__Group__0)
{ after(grammarAccess.getComponentImplAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLifeCycleMethod
entryRuleLifeCycleMethod 
:
{ before(grammarAccess.getLifeCycleMethodRule()); }
	 ruleLifeCycleMethod
{ after(grammarAccess.getLifeCycleMethodRule()); } 
	 EOF 
;

// Rule LifeCycleMethod
ruleLifeCycleMethod
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLifeCycleMethodAccess().getGroup()); }
(rule__LifeCycleMethod__Group__0)
{ after(grammarAccess.getLifeCycleMethodAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDecl
entryRuleVariableDecl 
:
{ before(grammarAccess.getVariableDeclRule()); }
	 ruleVariableDecl
{ after(grammarAccess.getVariableDeclRule()); } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclAccess().getGroup()); }
(rule__VariableDecl__Group__0)
{ after(grammarAccess.getVariableDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantDecl
entryRuleConstantDecl 
:
{ before(grammarAccess.getConstantDeclRule()); }
	 ruleConstantDecl
{ after(grammarAccess.getConstantDeclRule()); } 
	 EOF 
;

// Rule ConstantDecl
ruleConstantDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantDeclAccess().getGroup()); }
(rule__ConstantDecl__Group__0)
{ after(grammarAccess.getConstantDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceRealization
entryRuleInterfaceRealization 
:
{ before(grammarAccess.getInterfaceRealizationRule()); }
	 ruleInterfaceRealization
{ after(grammarAccess.getInterfaceRealizationRule()); } 
	 EOF 
;

// Rule InterfaceRealization
ruleInterfaceRealization
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceRealizationAccess().getGroup()); }
(rule__InterfaceRealization__Group__0)
{ after(grammarAccess.getInterfaceRealizationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodImpl
entryRuleMethodImpl 
:
{ before(grammarAccess.getMethodImplRule()); }
	 ruleMethodImpl
{ after(grammarAccess.getMethodImplRule()); } 
	 EOF 
;

// Rule MethodImpl
ruleMethodImpl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodImplAccess().getGroup()); }
(rule__MethodImpl__Group__0)
{ after(grammarAccess.getMethodImplAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatement
entryRuleIfStatement 
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementAccess().getGroup()); }
(rule__IfStatement__Group__0)
{ after(grammarAccess.getIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockStatement
entryRuleBlockStatement 
:
{ before(grammarAccess.getBlockStatementRule()); }
	 ruleBlockStatement
{ after(grammarAccess.getBlockStatementRule()); } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockStatementAccess().getGroup()); }
(rule__BlockStatement__Group__0)
{ after(grammarAccess.getBlockStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoopStatement
entryRuleLoopStatement 
:
{ before(grammarAccess.getLoopStatementRule()); }
	 ruleLoopStatement
{ after(grammarAccess.getLoopStatementRule()); } 
	 EOF 
;

// Rule LoopStatement
ruleLoopStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopStatementAccess().getGroup()); }
(rule__LoopStatement__Group__0)
{ after(grammarAccess.getLoopStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataAccessStatement
entryRuleDataAccessStatement 
:
{ before(grammarAccess.getDataAccessStatementRule()); }
	 ruleDataAccessStatement
{ after(grammarAccess.getDataAccessStatementRule()); } 
	 EOF 
;

// Rule DataAccessStatement
ruleDataAccessStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataAccessStatementAccess().getGroup()); }
(rule__DataAccessStatement__Group__0)
{ after(grammarAccess.getDataAccessStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableCall
entryRuleVariableCall 
:
{ before(grammarAccess.getVariableCallRule()); }
	 ruleVariableCall
{ after(grammarAccess.getVariableCallRule()); } 
	 EOF 
;

// Rule VariableCall
ruleVariableCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableCallAccess().getGroup()); }
(rule__VariableCall__Group__0)
{ after(grammarAccess.getVariableCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyCall
entryRulePropertyCall 
:
{ before(grammarAccess.getPropertyCallRule()); }
	 rulePropertyCall
{ after(grammarAccess.getPropertyCallRule()); } 
	 EOF 
;

// Rule PropertyCall
rulePropertyCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyCallAccess().getGroup()); }
(rule__PropertyCall__Group__0)
{ after(grammarAccess.getPropertyCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOtherExpression
entryRuleOtherExpression 
:
{ before(grammarAccess.getOtherExpressionRule()); }
	 ruleOtherExpression
{ after(grammarAccess.getOtherExpressionRule()); } 
	 EOF 
;

// Rule OtherExpression
ruleOtherExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOtherExpressionAccess().getGroup()); }
(rule__OtherExpression__Group__0)
{ after(grammarAccess.getOtherExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation 
:
{ before(grammarAccess.getUnaryOperationRule()); }
	 ruleUnaryOperation
{ after(grammarAccess.getUnaryOperationRule()); } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOperationAccess().getAlternatives()); }
(rule__UnaryOperation__Alternatives)
{ after(grammarAccess.getUnaryOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCastedExpression
entryRuleCastedExpression 
:
{ before(grammarAccess.getCastedExpressionRule()); }
	 ruleCastedExpression
{ after(grammarAccess.getCastedExpressionRule()); } 
	 EOF 
;

// Rule CastedExpression
ruleCastedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCastedExpressionAccess().getGroup()); }
(rule__CastedExpression__Group__0)
{ after(grammarAccess.getCastedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostfixOperation
entryRulePostfixOperation 
:
{ before(grammarAccess.getPostfixOperationRule()); }
	 rulePostfixOperation
{ after(grammarAccess.getPostfixOperationRule()); } 
	 EOF 
;

// Rule PostfixOperation
rulePostfixOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostfixOperationAccess().getGroup()); }
(rule__PostfixOperation__Group__0)
{ after(grammarAccess.getPostfixOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataQuery
entryRuleDataQuery 
:
{ before(grammarAccess.getDataQueryRule()); }
	 ruleDataQuery
{ after(grammarAccess.getDataQueryRule()); } 
	 EOF 
;

// Rule DataQuery
ruleDataQuery
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataQueryAccess().getGroup()); }
(rule__DataQuery__Group__0)
{ after(grammarAccess.getDataQueryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstantiationExpression
entryRuleInstantiationExpression 
:
{ before(grammarAccess.getInstantiationExpressionRule()); }
	 ruleInstantiationExpression
{ after(grammarAccess.getInstantiationExpressionRule()); } 
	 EOF 
;

// Rule InstantiationExpression
ruleInstantiationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstantiationExpressionAccess().getGroup()); }
(rule__InstantiationExpression__Group__0)
{ after(grammarAccess.getInstantiationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarationTypeReference
entryRuleDeclarationTypeReference 
:
{ before(grammarAccess.getDeclarationTypeReferenceRule()); }
	 ruleDeclarationTypeReference
{ after(grammarAccess.getDeclarationTypeReferenceRule()); } 
	 EOF 
;

// Rule DeclarationTypeReference
ruleDeclarationTypeReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationTypeReferenceAccess().getAlternatives()); }
(rule__DeclarationTypeReference__Alternatives)
{ after(grammarAccess.getDeclarationTypeReferenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeReference
entryRuleTypeReference 
:
{ before(grammarAccess.getTypeReferenceRule()); }
	 ruleTypeReference
{ after(grammarAccess.getTypeReferenceRule()); } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeReferenceAccess().getReferenceAssignment()); }
(rule__TypeReference__ReferenceAssignment)
{ after(grammarAccess.getTypeReferenceAccess().getReferenceAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCollectionType
entryRuleCollectionType 
:
{ before(grammarAccess.getCollectionTypeRule()); }
	 ruleCollectionType
{ after(grammarAccess.getCollectionTypeRule()); } 
	 EOF 
;

// Rule CollectionType
ruleCollectionType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCollectionTypeAccess().getGroup()); }
(rule__CollectionType__Group__0)
{ after(grammarAccess.getCollectionTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapType
entryRuleMapType 
:
{ before(grammarAccess.getMapTypeRule()); }
	 ruleMapType
{ after(grammarAccess.getMapTypeRule()); } 
	 EOF 
;

// Rule MapType
ruleMapType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMapTypeAccess().getGroup()); }
(rule__MapType__Group__0)
{ after(grammarAccess.getMapTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCharLiteral
entryRuleCharLiteral 
:
{ before(grammarAccess.getCharLiteralRule()); }
	 ruleCharLiteral
{ after(grammarAccess.getCharLiteralRule()); } 
	 EOF 
;

// Rule CharLiteral
ruleCharLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCharLiteralAccess().getValueAssignment()); }
(rule__CharLiteral__ValueAssignment)
{ after(grammarAccess.getCharLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
(rule__NumberLiteral__ValueAssignment)
{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard 
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
(rule__QualifiedNameWithWildcard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN 
:
{ before(grammarAccess.getBOOLEANRule()); }
	 ruleBOOLEAN
{ after(grammarAccess.getBOOLEANRule()); } 
	 EOF 
;

// Rule BOOLEAN
ruleBOOLEAN
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBOOLEANAccess().getAlternatives()); }
(rule__BOOLEAN__Alternatives)
{ after(grammarAccess.getBOOLEANAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNUMBER
entryRuleNUMBER 
:
{ before(grammarAccess.getNUMBERRule()); }
	 ruleNUMBER
{ after(grammarAccess.getNUMBERRule()); } 
	 EOF 
;

// Rule NUMBER
ruleNUMBER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNUMBERAccess().getAlternatives()); }
(rule__NUMBER__Alternatives)
{ after(grammarAccess.getNUMBERAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ComponentKind
ruleComponentKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentKindAccess().getAlternatives()); }
(rule__ComponentKind__Alternatives)
{ after(grammarAccess.getComponentKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule DataAccessOperation
ruleDataAccessOperation
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAccessOperationAccess().getAlternatives()); }
(rule__DataAccessOperation__Alternatives)
{ after(grammarAccess.getDataAccessOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__BehaviorModel__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorModelAccess().getImportsAssignment_2_0()); }
(rule__BehaviorModel__ImportsAssignment_2_0)
{ after(grammarAccess.getBehaviorModelAccess().getImportsAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getBehaviorModelAccess().getRepositoriesAssignment_2_1()); }
(rule__BehaviorModel__RepositoriesAssignment_2_1)
{ after(grammarAccess.getBehaviorModelAccess().getRepositoriesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__LocalDeclarationsAlternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getLocalDeclarationsVariableDeclParserRuleCall_4_0_0()); }
	ruleVariableDecl
{ after(grammarAccess.getComponentImplAccess().getLocalDeclarationsVariableDeclParserRuleCall_4_0_0()); }
)

    |(
{ before(grammarAccess.getComponentImplAccess().getLocalDeclarationsConstantDeclParserRuleCall_4_0_1()); }
	ruleConstantDecl
{ after(grammarAccess.getComponentImplAccess().getLocalDeclarationsConstantDeclParserRuleCall_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__ModifierAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getModifierVarKeyword_0_0_0()); }

	'var' 

{ after(grammarAccess.getVariableDeclAccess().getModifierVarKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getVariableDeclAccess().getModifierValKeyword_0_0_1()); }

	'val' 

{ after(grammarAccess.getVariableDeclAccess().getModifierValKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0()); }
	ruleIfStatement
{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_1()); }
	ruleAssignment
{ after(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_2()); }
	ruleLoopStatement
{ after(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getDataAccessStatementParserRuleCall_3()); }
	ruleDataAccessStatement
{ after(grammarAccess.getStatementAccess().getDataAccessStatementParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__FeatureAlternatives_1_0_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getFeatureEqualsSignEqualsSignKeyword_1_0_0_1_0_0()); }

	'==' 

{ after(grammarAccess.getRelationalExpressionAccess().getFeatureEqualsSignEqualsSignKeyword_1_0_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getFeatureExclamationMarkEqualsSignKeyword_1_0_0_1_0_1()); }

	'!=' 

{ after(grammarAccess.getRelationalExpressionAccess().getFeatureExclamationMarkEqualsSignKeyword_1_0_0_1_0_1()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getFeatureGreaterThanSignKeyword_1_0_0_1_0_2()); }

	'>' 

{ after(grammarAccess.getRelationalExpressionAccess().getFeatureGreaterThanSignKeyword_1_0_0_1_0_2()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getFeatureLessThanSignKeyword_1_0_0_1_0_3()); }

	'<' 

{ after(grammarAccess.getRelationalExpressionAccess().getFeatureLessThanSignKeyword_1_0_0_1_0_3()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getFeatureGreaterThanSignEqualsSignKeyword_1_0_0_1_0_4()); }

	'>=' 

{ after(grammarAccess.getRelationalExpressionAccess().getFeatureGreaterThanSignEqualsSignKeyword_1_0_0_1_0_4()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getFeatureLessThanSignEqualsSignKeyword_1_0_0_1_0_5()); }

	'<=' 

{ after(grammarAccess.getRelationalExpressionAccess().getFeatureLessThanSignEqualsSignKeyword_1_0_0_1_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__FeatureAlternatives_1_0_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getFeaturePlusSignKeyword_1_0_0_1_0_0()); }

	'+' 

{ after(grammarAccess.getAdditiveExpressionAccess().getFeaturePlusSignKeyword_1_0_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditiveExpressionAccess().getFeatureHyphenMinusKeyword_1_0_0_1_0_1()); }

	'-' 

{ after(grammarAccess.getAdditiveExpressionAccess().getFeatureHyphenMinusKeyword_1_0_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__FeatureAlternatives_1_0_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getFeatureAsteriskKeyword_1_0_0_1_0_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getFeatureAsteriskKeyword_1_0_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getFeatureSolidusKeyword_1_0_0_1_0_1()); }

	'/' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getFeatureSolidusKeyword_1_0_0_1_0_1()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getFeaturePercentSignKeyword_1_0_0_1_0_2()); }

	'%' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getFeaturePercentSignKeyword_1_0_0_1_0_2()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getFeatureAsteriskAsteriskKeyword_1_0_0_1_0_3()); }

	'**' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getFeatureAsteriskAsteriskKeyword_1_0_0_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getGroup_0()); }
(rule__UnaryOperation__Group_0__0)
{ after(grammarAccess.getUnaryOperationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperationAccess().getCastedExpressionParserRuleCall_1()); }
	ruleCastedExpression
{ after(grammarAccess.getUnaryOperationAccess().getCastedExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperation__FeatureAlternatives_1_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperationAccess().getFeaturePlusSignPlusSignKeyword_1_0_1_0_0()); }

	'++' 

{ after(grammarAccess.getPostfixOperationAccess().getFeaturePlusSignPlusSignKeyword_1_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getPostfixOperationAccess().getFeatureHyphenMinusHyphenMinusKeyword_1_0_1_0_1()); }

	'--' 

{ after(grammarAccess.getPostfixOperationAccess().getFeatureHyphenMinusHyphenMinusKeyword_1_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getInstantiationExpressionParserRuleCall_0()); }
	ruleInstantiationExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getInstantiationExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getVariableCallParserRuleCall_1()); }
	ruleVariableCall
{ after(grammarAccess.getPrimaryExpressionAccess().getVariableCallParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getDataQueryParserRuleCall_2()); }
	ruleDataQuery
{ after(grammarAccess.getPrimaryExpressionAccess().getDataQueryParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_3()); }
	ruleLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationTypeReference__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationTypeReferenceAccess().getTypeReferenceParserRuleCall_0()); }
	ruleTypeReference
{ after(grammarAccess.getDeclarationTypeReferenceAccess().getTypeReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationTypeReferenceAccess().getCollectionTypeParserRuleCall_1()); }
	ruleCollectionType
{ after(grammarAccess.getDeclarationTypeReferenceAccess().getCollectionTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationTypeReferenceAccess().getMapTypeParserRuleCall_2()); }
	ruleMapType
{ after(grammarAccess.getDeclarationTypeReferenceAccess().getMapTypeParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_1()); }
	ruleNumberLiteral
{ after(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getCharLiteralParserRuleCall_2()); }
	ruleCharLiteral
{ after(grammarAccess.getLiteralAccess().getCharLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BOOLEAN__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLEANAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getBOOLEANAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getBOOLEANAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getBOOLEANAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUMBERAccess().getGroup_0()); }
(rule__NUMBER__Group_0__0)
{ after(grammarAccess.getNUMBERAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getNUMBERAccess().getGroup_1()); }
(rule__NUMBER__Group_1__0)
{ after(grammarAccess.getNUMBERAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Alternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUMBERAccess().getPlusSignKeyword_0_0_0()); }

	'+' 

{ after(grammarAccess.getNUMBERAccess().getPlusSignKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getNUMBERAccess().getHyphenMinusKeyword_0_0_1()); }

	'-' 

{ after(grammarAccess.getNUMBERAccess().getHyphenMinusKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentKindAccess().getSTATELESSEnumLiteralDeclaration_0()); }
(	'stateless' 
)
{ after(grammarAccess.getComponentKindAccess().getSTATELESSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getComponentKindAccess().getSTATEFULEnumLiteralDeclaration_1()); }
(	'stateful' 
)
{ after(grammarAccess.getComponentKindAccess().getSTATEFULEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getComponentKindAccess().getSINGLETONEnumLiteralDeclaration_2()); }
(	'singleton' 
)
{ after(grammarAccess.getComponentKindAccess().getSINGLETONEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataAccessOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAccessOperationAccess().getSTOREEnumLiteralDeclaration_0()); }
(	'store' 
)
{ after(grammarAccess.getDataAccessOperationAccess().getSTOREEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDataAccessOperationAccess().getUPDATEEnumLiteralDeclaration_1()); }
(	'update' 
)
{ after(grammarAccess.getDataAccessOperationAccess().getUPDATEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getDataAccessOperationAccess().getDELETEEnumLiteralDeclaration_2()); }
(	'delete' 
)
{ after(grammarAccess.getDataAccessOperationAccess().getDELETEEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__BehaviorModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BehaviorModel__Group__0__Impl
	rule__BehaviorModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorModelAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getBehaviorModelAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BehaviorModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BehaviorModel__Group__1__Impl
	rule__BehaviorModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorModelAccess().getNameAssignment_1()); }
(rule__BehaviorModel__NameAssignment_1)
{ after(grammarAccess.getBehaviorModelAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BehaviorModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BehaviorModel__Group__2__Impl
	rule__BehaviorModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorModelAccess().getAlternatives_2()); }
(rule__BehaviorModel__Alternatives_2)*
{ after(grammarAccess.getBehaviorModelAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BehaviorModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BehaviorModel__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorModelAccess().getComponentImplAssignment_3()); }
(rule__BehaviorModel__ComponentImplAssignment_3)
{ after(grammarAccess.getBehaviorModelAccess().getComponentImplAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RepositoryReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RepositoryReference__Group__0__Impl
	rule__RepositoryReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RepositoryReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepositoryReferenceAccess().getRepositoryKeyword_0()); }

	'repository' 

{ after(grammarAccess.getRepositoryReferenceAccess().getRepositoryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RepositoryReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RepositoryReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RepositoryReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepositoryReferenceAccess().getReferenceAssignment_1()); }
(rule__RepositoryReference__ReferenceAssignment_1)
{ after(grammarAccess.getRepositoryReferenceAccess().getReferenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComponentImpl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group__0__Impl
	rule__ComponentImpl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getRealizeKeyword_0()); }

	'realize' 

{ after(grammarAccess.getComponentImplAccess().getRealizeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentImpl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group__1__Impl
	rule__ComponentImpl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getKindAssignment_1()); }
(rule__ComponentImpl__KindAssignment_1)?
{ after(grammarAccess.getComponentImplAccess().getKindAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentImpl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group__2__Impl
	rule__ComponentImpl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getRefComponentAssignment_2()); }
(rule__ComponentImpl__RefComponentAssignment_2)
{ after(grammarAccess.getComponentImplAccess().getRefComponentAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentImpl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group__3__Impl
	rule__ComponentImpl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getComponentImplAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentImpl__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group__4__Impl
	rule__ComponentImpl__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getLocalDeclarationsAssignment_4()); }
(rule__ComponentImpl__LocalDeclarationsAssignment_4)*
{ after(grammarAccess.getComponentImplAccess().getLocalDeclarationsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentImpl__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group__5__Impl
	rule__ComponentImpl__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getGroup_5()); }
(rule__ComponentImpl__Group_5__0)?
{ after(grammarAccess.getComponentImplAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentImpl__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group__6__Impl
	rule__ComponentImpl__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getGroup_6()); }
(rule__ComponentImpl__Group_6__0)?
{ after(grammarAccess.getComponentImplAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentImpl__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group__7__Impl
	rule__ComponentImpl__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getInterfacesAssignment_7()); }
(rule__ComponentImpl__InterfacesAssignment_7)*
{ after(grammarAccess.getComponentImplAccess().getInterfacesAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentImpl__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getComponentImplAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__ComponentImpl__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group_5__0__Impl
	rule__ComponentImpl__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getPostConstructKeyword_5_0()); }

	'post-construct' 

{ after(grammarAccess.getComponentImplAccess().getPostConstructKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentImpl__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getPostConstructAssignment_5_1()); }
(rule__ComponentImpl__PostConstructAssignment_5_1)
{ after(grammarAccess.getComponentImplAccess().getPostConstructAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComponentImpl__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group_6__0__Impl
	rule__ComponentImpl__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getPreDestroyKeyword_6_0()); }

	'pre-destroy' 

{ after(grammarAccess.getComponentImplAccess().getPreDestroyKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComponentImpl__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComponentImpl__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getPreDestroyAssignment_6_1()); }
(rule__ComponentImpl__PreDestroyAssignment_6_1)
{ after(grammarAccess.getComponentImplAccess().getPreDestroyAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LifeCycleMethod__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LifeCycleMethod__Group__0__Impl
	rule__LifeCycleMethod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LifeCycleMethod__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLifeCycleMethodAccess().getActionKeyword_0()); }

	'action' 

{ after(grammarAccess.getLifeCycleMethodAccess().getActionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LifeCycleMethod__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LifeCycleMethod__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LifeCycleMethod__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLifeCycleMethodAccess().getBodyAssignment_1()); }
(rule__LifeCycleMethod__BodyAssignment_1)
{ after(grammarAccess.getLifeCycleMethodAccess().getBodyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group__0__Impl
	rule__VariableDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getModifierAssignment_0()); }
(rule__VariableDecl__ModifierAssignment_0)
{ after(grammarAccess.getVariableDeclAccess().getModifierAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group__1__Impl
	rule__VariableDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getTypeAssignment_1()); }
(rule__VariableDecl__TypeAssignment_1)
{ after(grammarAccess.getVariableDeclAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDecl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getNameAssignment_2()); }
(rule__VariableDecl__NameAssignment_2)
{ after(grammarAccess.getVariableDeclAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ConstantDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDecl__Group__0__Impl
	rule__ConstantDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclAccess().getConstKeyword_0()); }

	'const' 

{ after(grammarAccess.getConstantDeclAccess().getConstKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDecl__Group__1__Impl
	rule__ConstantDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclAccess().getNameAssignment_1()); }
(rule__ConstantDecl__NameAssignment_1)
{ after(grammarAccess.getConstantDeclAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDecl__Group__2__Impl
	rule__ConstantDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getConstantDeclAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstantDecl__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstantDecl__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDecl__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclAccess().getValueAssignment_3()); }
(rule__ConstantDecl__ValueAssignment_3)
{ after(grammarAccess.getConstantDeclAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InterfaceRealization__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceRealization__Group__0__Impl
	rule__InterfaceRealization__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceRealization__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceRealizationAccess().getIfaceKeyword_0()); }

	'iface' 

{ after(grammarAccess.getInterfaceRealizationAccess().getIfaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceRealization__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceRealization__Group__1__Impl
	rule__InterfaceRealization__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceRealization__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceRealizationAccess().getRefInterfaceAssignment_1()); }
(rule__InterfaceRealization__RefInterfaceAssignment_1)
{ after(grammarAccess.getInterfaceRealizationAccess().getRefInterfaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceRealization__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceRealization__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceRealization__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceRealizationAccess().getMethodsAssignment_2()); }
(rule__InterfaceRealization__MethodsAssignment_2)*
{ after(grammarAccess.getInterfaceRealizationAccess().getMethodsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MethodImpl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodImpl__Group__0__Impl
	rule__MethodImpl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodImpl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodImplAccess().getOperationKeyword_0()); }

	'operation' 

{ after(grammarAccess.getMethodImplAccess().getOperationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodImpl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodImpl__Group__1__Impl
	rule__MethodImpl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodImpl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodImplAccess().getRefMethodAssignment_1()); }
(rule__MethodImpl__RefMethodAssignment_1)
{ after(grammarAccess.getMethodImplAccess().getRefMethodAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodImpl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodImpl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodImpl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodImplAccess().getBodyAssignment_2()); }
(rule__MethodImpl__BodyAssignment_2)
{ after(grammarAccess.getMethodImplAccess().getBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getExprAssignment_2()); }
(rule__IfStatement__ExprAssignment_2)
{ after(grammarAccess.getIfStatementAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfStatementAssignment_4()); }
(rule__IfStatement__IfStatementAssignment_4)
{ after(grammarAccess.getIfStatementAccess().getIfStatementAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_5()); }
(rule__IfStatement__Group_5__0)?
{ after(grammarAccess.getIfStatementAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfStatement__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__0__Impl
	rule__IfStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); }

	'else' 

{ after(grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseStatementAssignment_5_1()); }
(rule__IfStatement__ElseStatementAssignment_5_1)
{ after(grammarAccess.getIfStatementAccess().getElseStatementAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BlockStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__0__Impl
	rule__BlockStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getBlockStatementAction_0()); }
(

)
{ after(grammarAccess.getBlockStatementAccess().getBlockStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__1__Impl
	rule__BlockStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockStatementAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__2__Impl
	rule__BlockStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getStatementsAssignment_2()); }
(rule__BlockStatement__StatementsAssignment_2)*
{ after(grammarAccess.getBlockStatementAccess().getStatementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BlockStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BlockStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBlockStatementAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
(rule__Assignment__VariableAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
(rule__Assignment__ExpressionAssignment_2)
{ after(grammarAccess.getAssignmentAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LoopStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__0__Impl
	rule__LoopStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getLoopStatementAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__1__Impl
	rule__LoopStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getLoopStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__2__Impl
	rule__LoopStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getVariableAssignment_2()); }
(rule__LoopStatement__VariableAssignment_2)
{ after(grammarAccess.getLoopStatementAccess().getVariableAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__3__Impl
	rule__LoopStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getLoopStatementAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__4__Impl
	rule__LoopStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getExpressionAssignment_4()); }
(rule__LoopStatement__ExpressionAssignment_4)
{ after(grammarAccess.getLoopStatementAccess().getExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__5__Impl
	rule__LoopStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getLoopStatementAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getStatementAssignment_6()); }
(rule__LoopStatement__StatementAssignment_6)
{ after(grammarAccess.getLoopStatementAccess().getStatementAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__DataAccessStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataAccessStatement__Group__0__Impl
	rule__DataAccessStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataAccessStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAccessStatementAccess().getOperationAssignment_0()); }
(rule__DataAccessStatement__OperationAssignment_0)
{ after(grammarAccess.getDataAccessStatementAccess().getOperationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataAccessStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataAccessStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataAccessStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAccessStatementAccess().getVariableAssignment_1()); }
(rule__DataAccessStatement__VariableAssignment_1)
{ after(grammarAccess.getDataAccessStatementAccess().getVariableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableCall__Group__0__Impl
	rule__VariableCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableCallAccess().getVariableAssignment_0()); }
(rule__VariableCall__VariableAssignment_0)
{ after(grammarAccess.getVariableCallAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableCall__Group__1__Impl
	rule__VariableCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableCallAccess().getGroup_1()); }
(rule__VariableCall__Group_1__0)?
{ after(grammarAccess.getVariableCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableCall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableCallAccess().getGroup_2()); }
(rule__VariableCall__Group_2__0)?
{ after(grammarAccess.getVariableCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableCall__Group_1__0__Impl
	rule__VariableCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableCallAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getVariableCallAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableCall__Group_1__1__Impl
	rule__VariableCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableCallAccess().getIndexAssignment_1_1()); }
(rule__VariableCall__IndexAssignment_1_1)?
{ after(grammarAccess.getVariableCallAccess().getIndexAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableCall__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableCall__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableCallAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getVariableCallAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableCall__Group_2__0__Impl
	rule__VariableCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableCallAccess().getFullStopKeyword_2_0()); }

	'.' 

{ after(grammarAccess.getVariableCallAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableCallAccess().getSubPropertyAssignment_2_1()); }
(rule__VariableCall__SubPropertyAssignment_2_1)
{ after(grammarAccess.getVariableCallAccess().getSubPropertyAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyCall__Group__0__Impl
	rule__PropertyCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCallAccess().getPropertyAssignment_0()); }
(rule__PropertyCall__PropertyAssignment_0)
{ after(grammarAccess.getPropertyCallAccess().getPropertyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyCall__Group__1__Impl
	rule__PropertyCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCallAccess().getGroup_1()); }
(rule__PropertyCall__Group_1__0)?
{ after(grammarAccess.getPropertyCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyCall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCallAccess().getGroup_2()); }
(rule__PropertyCall__Group_2__0)?
{ after(grammarAccess.getPropertyCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PropertyCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyCall__Group_1__0__Impl
	rule__PropertyCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCall__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCallAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getPropertyCallAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyCall__Group_1__1__Impl
	rule__PropertyCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCall__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCallAccess().getIndexAssignment_1_1()); }
(rule__PropertyCall__IndexAssignment_1_1)?
{ after(grammarAccess.getPropertyCallAccess().getIndexAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyCall__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyCall__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCall__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCallAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getPropertyCallAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PropertyCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyCall__Group_2__0__Impl
	rule__PropertyCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCallAccess().getFullStopKeyword_2_0()); }

	'.' 

{ after(grammarAccess.getPropertyCallAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCallAccess().getSubPropertyAssignment_2_1()); }
(rule__PropertyCall__SubPropertyAssignment_2_1)
{ after(grammarAccess.getPropertyCallAccess().getSubPropertyAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
(rule__Expression__Group_1__0)*
{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1_0()); }
(rule__Expression__Group_1_0__0)
{ after(grammarAccess.getExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_1()); }
(rule__Expression__RightAssignment_1_1)
{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1_0_0()); }
(rule__Expression__Group_1_0_0__0)
{ after(grammarAccess.getExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Expression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1_0_0__0__Impl
	rule__Expression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__Expression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
{ after(grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
(rule__AndExpression__Group_1_0__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1()); }
(rule__AndExpression__RightAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0_0()); }
(rule__AndExpression__Group_1_0_0__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AndExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0_0__0__Impl
	rule__AndExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__AndExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getAndExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOtherExpressionParserRuleCall_0()); }
	ruleOtherExpression
{ after(grammarAccess.getRelationalExpressionAccess().getOtherExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0()); }
(rule__RelationalExpression__Group_1_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_1()); }
(rule__RelationalExpression__RightAssignment_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0()); }
(rule__RelationalExpression__Group_1_0_0__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__RelationalExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_0__0__Impl
	rule__RelationalExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__RelationalExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getRelationalExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OtherExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherExpression__Group__0__Impl
	rule__OtherExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
{ after(grammarAccess.getOtherExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OtherExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherExpressionAccess().getGroup_1()); }
(rule__OtherExpression__Group_1__0)?
{ after(grammarAccess.getOtherExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OtherExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherExpression__Group_1__0__Impl
	rule__OtherExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherExpressionAccess().getGroup_1_0()); }
(rule__OtherExpression__Group_1_0__0)
{ after(grammarAccess.getOtherExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OtherExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherExpressionAccess().getTypeAssignment_1_1()); }
(rule__OtherExpression__TypeAssignment_1_1)
{ after(grammarAccess.getOtherExpressionAccess().getTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OtherExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherExpressionAccess().getGroup_1_0_0()); }
(rule__OtherExpression__Group_1_0_0__0)
{ after(grammarAccess.getOtherExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__OtherExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherExpression__Group_1_0_0__0__Impl
	rule__OtherExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherExpressionAccess().getExpressionExpressionAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getOtherExpressionAccess().getExpressionExpressionAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OtherExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OtherExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__OtherExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getOtherExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0()); }
(rule__AdditiveExpression__Group_1_0__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_1()); }
(rule__AdditiveExpression__RightAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_0()); }
(rule__AdditiveExpression__Group_1_0_0__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AdditiveExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0_0__0__Impl
	rule__AdditiveExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__AdditiveExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOperationParserRuleCall_0()); }
	ruleUnaryOperation
{ after(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
(rule__MultiplicativeExpression__Group_1_0__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_1()); }
(rule__MultiplicativeExpression__RightAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_0()); }
(rule__MultiplicativeExpression__Group_1_0_0__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__MultiplicativeExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0_0__0__Impl
	rule__MultiplicativeExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getExpressionLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getExpressionLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__MultiplicativeExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryOperation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_0__0__Impl
	rule__UnaryOperation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getUnaryOperationAccess().getExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_0__1__Impl
	rule__UnaryOperation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getFeatureAssignment_0_1()); }
(rule__UnaryOperation__FeatureAssignment_0_1)
{ after(grammarAccess.getUnaryOperationAccess().getFeatureAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryOperation__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryOperation__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperandAssignment_0_2()); }
(rule__UnaryOperation__OperandAssignment_0_2)
{ after(grammarAccess.getUnaryOperationAccess().getOperandAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CastedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group__0__Impl
	rule__CastedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getPostfixOperationParserRuleCall_0()); }
	rulePostfixOperation
{ after(grammarAccess.getCastedExpressionAccess().getPostfixOperationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getGroup_1()); }
(rule__CastedExpression__Group_1__0)*
{ after(grammarAccess.getCastedExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CastedExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group_1__0__Impl
	rule__CastedExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getGroup_1_0()); }
(rule__CastedExpression__Group_1_0__0)
{ after(grammarAccess.getCastedExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastedExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getTypeAssignment_1_1()); }
(rule__CastedExpression__TypeAssignment_1_1)
{ after(grammarAccess.getCastedExpressionAccess().getTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CastedExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getGroup_1_0_0()); }
(rule__CastedExpression__Group_1_0_0__0)
{ after(grammarAccess.getCastedExpressionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__CastedExpression__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group_1_0_0__0__Impl
	rule__CastedExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getExpressionTargetAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getCastedExpressionAccess().getExpressionTargetAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastedExpression__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getFeatureAssignment_1_0_0_1()); }
(rule__CastedExpression__FeatureAssignment_1_0_0_1)
{ after(grammarAccess.getCastedExpressionAccess().getFeatureAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperation__Group__0__Impl
	rule__PostfixOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperationAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getPostfixOperationAccess().getPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperationAccess().getGroup_1()); }
(rule__PostfixOperation__Group_1__0)?
{ after(grammarAccess.getPostfixOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperation__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperationAccess().getGroup_1_0()); }
(rule__PostfixOperation__Group_1_0__0)
{ after(grammarAccess.getPostfixOperationAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__PostfixOperation__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperation__Group_1_0__0__Impl
	rule__PostfixOperation__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperation__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperationAccess().getExpressionOperandAction_1_0_0()); }
(

)
{ after(grammarAccess.getPostfixOperationAccess().getExpressionOperandAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixOperation__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixOperation__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperation__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperationAccess().getFeatureAssignment_1_0_1()); }
(rule__PostfixOperation__FeatureAssignment_1_0_1)
{ after(grammarAccess.getPostfixOperationAccess().getFeatureAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataQuery__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataQuery__Group__0__Impl
	rule__DataQuery__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataQuery__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataQueryAccess().getQueryKeyword_0()); }

	'query' 

{ after(grammarAccess.getDataQueryAccess().getQueryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataQuery__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataQuery__Group__1__Impl
	rule__DataQuery__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataQuery__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataQueryAccess().getTypeAssignment_1()); }
(rule__DataQuery__TypeAssignment_1)
{ after(grammarAccess.getDataQueryAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataQuery__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataQuery__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataQuery__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataQueryAccess().getQueryAssignment_2()); }
(rule__DataQuery__QueryAssignment_2)
{ after(grammarAccess.getDataQueryAccess().getQueryAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InstantiationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstantiationExpression__Group__0__Impl
	rule__InstantiationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InstantiationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiationExpressionAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getInstantiationExpressionAccess().getNewKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstantiationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstantiationExpression__Group__1__Impl
	rule__InstantiationExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InstantiationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiationExpressionAccess().getTypeAssignment_1()); }
(rule__InstantiationExpression__TypeAssignment_1)
{ after(grammarAccess.getInstantiationExpressionAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstantiationExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstantiationExpression__Group__2__Impl
	rule__InstantiationExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InstantiationExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiationExpressionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getInstantiationExpressionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstantiationExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstantiationExpression__Group__3__Impl
	rule__InstantiationExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InstantiationExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiationExpressionAccess().getParametersAssignment_3()); }
(rule__InstantiationExpression__ParametersAssignment_3)
{ after(grammarAccess.getInstantiationExpressionAccess().getParametersAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InstantiationExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InstantiationExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InstantiationExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiationExpressionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getInstantiationExpressionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CollectionType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionType__Group__0__Impl
	rule__CollectionType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getReferenceAssignment_0()); }
(rule__CollectionType__ReferenceAssignment_0)
{ after(grammarAccess.getCollectionTypeAccess().getReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionType__Group__1__Impl
	rule__CollectionType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getCollectionTypeAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionType__Group__2__Impl
	rule__CollectionType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getSizeAssignment_2()); }
(rule__CollectionType__SizeAssignment_2)?
{ after(grammarAccess.getCollectionTypeAccess().getSizeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getCollectionTypeAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MapType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__0__Impl
	rule__MapType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getReferenceAssignment_0()); }
(rule__MapType__ReferenceAssignment_0)
{ after(grammarAccess.getMapTypeAccess().getReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__1__Impl
	rule__MapType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getMapTypeAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getGroup_2()); }
(rule__MapType__Group_2__0)
{ after(grammarAccess.getMapTypeAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MapType__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group_2__0__Impl
	rule__MapType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getKeyTypeAssignment_2_0()); }
(rule__MapType__KeyTypeAssignment_2_0)
{ after(grammarAccess.getMapTypeAccess().getKeyTypeAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapType__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getGreaterThanSignKeyword_2_1()); }

	'>' 

{ after(grammarAccess.getMapTypeAccess().getGreaterThanSignKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1()); }
(rule__QualifiedNameWithWildcard__Group_1__0)?
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcard__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group_1__0__Impl
	rule__QualifiedNameWithWildcard__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1()); }

	'*' 

{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NUMBER__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NUMBER__Group_0__0__Impl
	rule__NUMBER__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUMBERAccess().getAlternatives_0_0()); }
(rule__NUMBER__Alternatives_0_0)?
{ after(grammarAccess.getNUMBERAccess().getAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBER__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NUMBER__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0_1()); }
	RULE_INT
{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NUMBER__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NUMBER__Group_1__0__Impl
	rule__NUMBER__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_0()); }
	RULE_INT
{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBER__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NUMBER__Group_1__1__Impl
	rule__NUMBER__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUMBERAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getNUMBERAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NUMBER__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NUMBER__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUMBER__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_2()); }
	RULE_INT
{ after(grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__BehaviorModel__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorModelAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getBehaviorModelAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorModel__ImportsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorModelAccess().getImportsImportParserRuleCall_2_0_0()); }
	ruleImport{ after(grammarAccess.getBehaviorModelAccess().getImportsImportParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorModel__RepositoriesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorModelAccess().getRepositoriesRepositoryReferenceParserRuleCall_2_1_0()); }
	ruleRepositoryReference{ after(grammarAccess.getBehaviorModelAccess().getRepositoriesRepositoryReferenceParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BehaviorModel__ComponentImplAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorModelAccess().getComponentImplComponentImplParserRuleCall_3_0()); }
	ruleComponentImpl{ after(grammarAccess.getBehaviorModelAccess().getComponentImplComponentImplParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RepositoryReference__ReferenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRepositoryReferenceAccess().getReferenceSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getRepositoryReferenceAccess().getReferenceSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildcard{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__KindAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getKindComponentKindEnumRuleCall_1_0()); }
	ruleComponentKind{ after(grammarAccess.getComponentImplAccess().getKindComponentKindEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__RefComponentAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getRefComponentComponentCrossReference_2_0()); }
(
{ before(grammarAccess.getComponentImplAccess().getRefComponentComponentQualifiedNameParserRuleCall_2_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getComponentImplAccess().getRefComponentComponentQualifiedNameParserRuleCall_2_0_1()); }
)
{ after(grammarAccess.getComponentImplAccess().getRefComponentComponentCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__LocalDeclarationsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getLocalDeclarationsAlternatives_4_0()); }
(rule__ComponentImpl__LocalDeclarationsAlternatives_4_0)
{ after(grammarAccess.getComponentImplAccess().getLocalDeclarationsAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__PostConstructAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getPostConstructLifeCycleMethodParserRuleCall_5_1_0()); }
	ruleLifeCycleMethod{ after(grammarAccess.getComponentImplAccess().getPostConstructLifeCycleMethodParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__PreDestroyAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getPreDestroyLifeCycleMethodParserRuleCall_6_1_0()); }
	ruleLifeCycleMethod{ after(grammarAccess.getComponentImplAccess().getPreDestroyLifeCycleMethodParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComponentImpl__InterfacesAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentImplAccess().getInterfacesInterfaceRealizationParserRuleCall_7_0()); }
	ruleInterfaceRealization{ after(grammarAccess.getComponentImplAccess().getInterfacesInterfaceRealizationParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LifeCycleMethod__BodyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLifeCycleMethodAccess().getBodyBlockStatementParserRuleCall_1_0()); }
	ruleBlockStatement{ after(grammarAccess.getLifeCycleMethodAccess().getBodyBlockStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__ModifierAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getModifierAlternatives_0_0()); }
(rule__VariableDecl__ModifierAlternatives_0_0)
{ after(grammarAccess.getVariableDeclAccess().getModifierAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getTypeDeclarationTypeReferenceParserRuleCall_1_0()); }
	ruleDeclarationTypeReference{ after(grammarAccess.getVariableDeclAccess().getTypeDeclarationTypeReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDecl__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getVariableDeclAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDecl__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConstantDeclAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstantDecl__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantDeclAccess().getValueExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getConstantDeclAccess().getValueExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceRealization__RefInterfaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceRealizationAccess().getRefInterfaceInterfaceCrossReference_1_0()); }
(
{ before(grammarAccess.getInterfaceRealizationAccess().getRefInterfaceInterfaceQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getInterfaceRealizationAccess().getRefInterfaceInterfaceQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getInterfaceRealizationAccess().getRefInterfaceInterfaceCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceRealization__MethodsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceRealizationAccess().getMethodsMethodImplParserRuleCall_2_0()); }
	ruleMethodImpl{ after(grammarAccess.getInterfaceRealizationAccess().getMethodsMethodImplParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodImpl__RefMethodAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodImplAccess().getRefMethodMethodDeclCrossReference_1_0()); }
(
{ before(grammarAccess.getMethodImplAccess().getRefMethodMethodDeclQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getMethodImplAccess().getRefMethodMethodDeclQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getMethodImplAccess().getRefMethodMethodDeclCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodImpl__BodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodImplAccess().getBodyBlockStatementParserRuleCall_2_0()); }
	ruleBlockStatement{ after(grammarAccess.getMethodImplAccess().getBodyBlockStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfStatementAccess().getExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__IfStatementAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfStatementBlockStatementParserRuleCall_4_0()); }
	ruleBlockStatement{ after(grammarAccess.getIfStatementAccess().getIfStatementBlockStatementParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseStatementAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseStatementBlockStatementParserRuleCall_5_1_0()); }
	ruleBlockStatement{ after(grammarAccess.getIfStatementAccess().getElseStatementBlockStatementParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockStatement__StatementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockStatementAccess().getStatementsStatementParserRuleCall_2_0()); }
	ruleStatement{ after(grammarAccess.getBlockStatementAccess().getStatementsStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getVariableVariableCallParserRuleCall_0_0()); }
	ruleVariableCall{ after(grammarAccess.getAssignmentAccess().getVariableVariableCallParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__VariableAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getVariableVariableDeclParserRuleCall_2_0()); }
	ruleVariableDecl{ after(grammarAccess.getLoopStatementAccess().getVariableVariableDeclParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__ExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getExpressionExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getLoopStatementAccess().getExpressionExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__StatementAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopStatementAccess().getStatementBlockStatementParserRuleCall_6_0()); }
	ruleBlockStatement{ after(grammarAccess.getLoopStatementAccess().getStatementBlockStatementParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataAccessStatement__OperationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAccessStatementAccess().getOperationDataAccessOperationEnumRuleCall_0_0()); }
	ruleDataAccessOperation{ after(grammarAccess.getDataAccessStatementAccess().getOperationDataAccessOperationEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataAccessStatement__VariableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAccessStatementAccess().getVariableVariableDeclCrossReference_1_0()); }
(
{ before(grammarAccess.getDataAccessStatementAccess().getVariableVariableDeclIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getDataAccessStatementAccess().getVariableVariableDeclIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getDataAccessStatementAccess().getVariableVariableDeclCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableCallAccess().getVariableVariableDeclCrossReference_0_0()); }
(
{ before(grammarAccess.getVariableCallAccess().getVariableVariableDeclIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableCallAccess().getVariableVariableDeclIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getVariableCallAccess().getVariableVariableDeclCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__IndexAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableCallAccess().getIndexExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getVariableCallAccess().getIndexExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableCall__SubPropertyAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableCallAccess().getSubPropertyPropertyCallParserRuleCall_2_1_0()); }
	rulePropertyCall{ after(grammarAccess.getVariableCallAccess().getSubPropertyPropertyCallParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCall__PropertyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCallAccess().getPropertyPropertyCrossReference_0_0()); }
(
{ before(grammarAccess.getPropertyCallAccess().getPropertyPropertyIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getPropertyCallAccess().getPropertyPropertyIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getPropertyCallAccess().getPropertyPropertyCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCall__IndexAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCallAccess().getIndexExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getPropertyCallAccess().getIndexExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyCall__SubPropertyAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyCallAccess().getSubPropertyPropertyCallParserRuleCall_2_1_0()); }
	rulePropertyCall{ after(grammarAccess.getPropertyCallAccess().getSubPropertyPropertyCallParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getFeatureVerticalLineVerticalLineKeyword_1_0_0_1_0()); }
(
{ before(grammarAccess.getExpressionAccess().getFeatureVerticalLineVerticalLineKeyword_1_0_0_1_0()); }

	'||' 

{ after(grammarAccess.getExpressionAccess().getFeatureVerticalLineVerticalLineKeyword_1_0_0_1_0()); }
)

{ after(grammarAccess.getExpressionAccess().getFeatureVerticalLineVerticalLineKeyword_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0()); }
	ruleAndExpression{ after(grammarAccess.getExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getFeatureAmpersandAmpersandKeyword_1_0_0_1_0()); }
(
{ before(grammarAccess.getAndExpressionAccess().getFeatureAmpersandAmpersandKeyword_1_0_0_1_0()); }

	'&&' 

{ after(grammarAccess.getAndExpressionAccess().getFeatureAmpersandAmpersandKeyword_1_0_0_1_0()); }
)

{ after(grammarAccess.getAndExpressionAccess().getFeatureAmpersandAmpersandKeyword_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightRelationalExpressionParserRuleCall_1_1_0()); }
	ruleRelationalExpression{ after(grammarAccess.getAndExpressionAccess().getRightRelationalExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getFeatureAlternatives_1_0_0_1_0()); }
(rule__RelationalExpression__FeatureAlternatives_1_0_0_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getFeatureAlternatives_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightOtherExpressionParserRuleCall_1_1_0()); }
	ruleOtherExpression{ after(grammarAccess.getRelationalExpressionAccess().getRightOtherExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OtherExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherExpressionAccess().getFeatureInstanceofKeyword_1_0_0_1_0()); }
(
{ before(grammarAccess.getOtherExpressionAccess().getFeatureInstanceofKeyword_1_0_0_1_0()); }

	'instanceof' 

{ after(grammarAccess.getOtherExpressionAccess().getFeatureInstanceofKeyword_1_0_0_1_0()); }
)

{ after(grammarAccess.getOtherExpressionAccess().getFeatureInstanceofKeyword_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OtherExpression__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOtherExpressionAccess().getTypeTypeReferenceParserRuleCall_1_1_0()); }
	ruleTypeReference{ after(grammarAccess.getOtherExpressionAccess().getTypeTypeReferenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getFeatureAlternatives_1_0_0_1_0()); }
(rule__AdditiveExpression__FeatureAlternatives_1_0_0_1_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getFeatureAlternatives_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getFeatureAlternatives_1_0_0_1_0()); }
(rule__MultiplicativeExpression__FeatureAlternatives_1_0_0_1_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getFeatureAlternatives_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightUnaryOperationParserRuleCall_1_1_0()); }
	ruleUnaryOperation{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightUnaryOperationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__FeatureAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getFeatureExclamationMarkKeyword_0_1_0()); }
(
{ before(grammarAccess.getUnaryOperationAccess().getFeatureExclamationMarkKeyword_0_1_0()); }

	'!' 

{ after(grammarAccess.getUnaryOperationAccess().getFeatureExclamationMarkKeyword_0_1_0()); }
)

{ after(grammarAccess.getUnaryOperationAccess().getFeatureExclamationMarkKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperation__OperandAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperationAccess().getOperandUnaryOperationParserRuleCall_0_2_0()); }
	ruleUnaryOperation{ after(grammarAccess.getUnaryOperationAccess().getOperandUnaryOperationParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__FeatureAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getFeatureAsKeyword_1_0_0_1_0()); }
(
{ before(grammarAccess.getCastedExpressionAccess().getFeatureAsKeyword_1_0_0_1_0()); }

	'as' 

{ after(grammarAccess.getCastedExpressionAccess().getFeatureAsKeyword_1_0_0_1_0()); }
)

{ after(grammarAccess.getCastedExpressionAccess().getFeatureAsKeyword_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getTypeTypeReferenceParserRuleCall_1_1_0()); }
	ruleTypeReference{ after(grammarAccess.getCastedExpressionAccess().getTypeTypeReferenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixOperation__FeatureAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixOperationAccess().getFeatureAlternatives_1_0_1_0()); }
(rule__PostfixOperation__FeatureAlternatives_1_0_1_0)
{ after(grammarAccess.getPostfixOperationAccess().getFeatureAlternatives_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataQuery__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataQueryAccess().getTypeDeclarationTypeReferenceParserRuleCall_1_0()); }
	ruleDeclarationTypeReference{ after(grammarAccess.getDataQueryAccess().getTypeDeclarationTypeReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataQuery__QueryAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataQueryAccess().getQuerySTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getDataQueryAccess().getQuerySTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstantiationExpression__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiationExpressionAccess().getTypeTypeReferenceParserRuleCall_1_0()); }
	ruleTypeReference{ after(grammarAccess.getInstantiationExpressionAccess().getTypeTypeReferenceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InstantiationExpression__ParametersAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstantiationExpressionAccess().getParametersExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getInstantiationExpressionAccess().getParametersExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__ReferenceAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getReferenceNamedTypeCrossReference_0()); }
(
{ before(grammarAccess.getTypeReferenceAccess().getReferenceNamedTypeIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getTypeReferenceAccess().getReferenceNamedTypeIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getTypeReferenceAccess().getReferenceNamedTypeCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__ReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getReferenceTypeReferenceParserRuleCall_0_0()); }
	ruleTypeReference{ after(grammarAccess.getCollectionTypeAccess().getReferenceTypeReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__SizeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getSizeINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getCollectionTypeAccess().getSizeINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__ReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getReferenceTypeReferenceParserRuleCall_0_0()); }
	ruleTypeReference{ after(grammarAccess.getMapTypeAccess().getReferenceTypeReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapType__KeyTypeAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapTypeAccess().getKeyTypeTypeReferenceParserRuleCall_2_0_0()); }
	ruleTypeReference{ after(grammarAccess.getMapTypeAccess().getKeyTypeTypeReferenceParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CharLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCharLiteralAccess().getValueCHARACTERTerminalRuleCall_0()); }
	RULE_CHARACTER{ after(grammarAccess.getCharLiteralAccess().getValueCHARACTERTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueNUMBERParserRuleCall_0()); }
	ruleNUMBER{ after(grammarAccess.getNumberLiteralAccess().getValueNUMBERParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANParserRuleCall_0()); }
	ruleBOOLEAN{ after(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_CHARACTER : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\''))) '\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


