/*
* generated by Xtext
*/
grammar InternalBehavior;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.spp.cocome.behavior.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.spp.cocome.behavior.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.spp.cocome.behavior.services.BehaviorGrammarAccess;

}

@parser::members {

 	private BehaviorGrammarAccess grammarAccess;
 	
    public InternalBehaviorParser(TokenStream input, BehaviorGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "BehaviorModel";	
   	}
   	
   	@Override
   	protected BehaviorGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBehaviorModel
entryRuleBehaviorModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBehaviorModelRule()); }
	 iv_ruleBehaviorModel=ruleBehaviorModel 
	 { $current=$iv_ruleBehaviorModel.current; } 
	 EOF 
;

// Rule BehaviorModel
ruleBehaviorModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBehaviorModelAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorModelAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorModelRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorModelAccess().getImportsImportParserRuleCall_2_0_0()); 
	    }
		lv_imports_2_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorModelAccess().getRepositoriesRepositoryReferenceParserRuleCall_2_1_0()); 
	    }
		lv_repositories_3_0=ruleRepositoryReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorModelRule());
	        }
       		add(
       			$current, 
       			"repositories",
        		lv_repositories_3_0, 
        		"RepositoryReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorModelAccess().getComponentImplComponentImplParserRuleCall_3_0()); 
	    }
		lv_componentImpl_4_0=ruleComponentImpl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorModelRule());
	        }
       		set(
       			$current, 
       			"componentImpl",
        		lv_componentImpl_4_0, 
        		"ComponentImpl");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRepositoryReference
entryRuleRepositoryReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRepositoryReferenceRule()); }
	 iv_ruleRepositoryReference=ruleRepositoryReference 
	 { $current=$iv_ruleRepositoryReference.current; } 
	 EOF 
;

// Rule RepositoryReference
ruleRepositoryReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='repository' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRepositoryReferenceAccess().getRepositoryKeyword_0());
    }
(
(
		lv_reference_1_0=RULE_STRING
		{
			newLeafNode(lv_reference_1_0, grammarAccess.getRepositoryReferenceAccess().getReferenceSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRepositoryReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"reference",
        		lv_reference_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleComponentImpl
entryRuleComponentImpl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentImplRule()); }
	 iv_ruleComponentImpl=ruleComponentImpl 
	 { $current=$iv_ruleComponentImpl.current; } 
	 EOF 
;

// Rule ComponentImpl
ruleComponentImpl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='realize' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentImplAccess().getRealizeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentImplAccess().getKindComponentKindEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=ruleComponentKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentImplRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"ComponentKind");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentImplRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getComponentImplAccess().getRefComponentComponentCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getComponentImplAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentImplAccess().getLocalDeclarationsVariableDeclParserRuleCall_4_0_0()); 
	    }
		lv_localDeclarations_4_1=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentImplRule());
	        }
       		add(
       			$current, 
       			"localDeclarations",
        		lv_localDeclarations_4_1, 
        		"VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getComponentImplAccess().getLocalDeclarationsConstantDeclParserRuleCall_4_0_1()); 
	    }
		lv_localDeclarations_4_2=ruleConstantDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentImplRule());
	        }
       		add(
       			$current, 
       			"localDeclarations",
        		lv_localDeclarations_4_2, 
        		"ConstantDecl");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*(	otherlv_5='post-construct' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getComponentImplAccess().getPostConstructKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentImplAccess().getPostConstructLifeCycleMethodParserRuleCall_5_1_0()); 
	    }
		lv_postConstruct_6_0=ruleLifeCycleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentImplRule());
	        }
       		set(
       			$current, 
       			"postConstruct",
        		lv_postConstruct_6_0, 
        		"LifeCycleMethod");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='pre-destroy' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getComponentImplAccess().getPreDestroyKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentImplAccess().getPreDestroyLifeCycleMethodParserRuleCall_6_1_0()); 
	    }
		lv_preDestroy_8_0=ruleLifeCycleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentImplRule());
	        }
       		set(
       			$current, 
       			"preDestroy",
        		lv_preDestroy_8_0, 
        		"LifeCycleMethod");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getComponentImplAccess().getInterfacesInterfaceRealizationParserRuleCall_7_0()); 
	    }
		lv_interfaces_9_0=ruleInterfaceRealization		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComponentImplRule());
	        }
       		add(
       			$current, 
       			"interfaces",
        		lv_interfaces_9_0, 
        		"InterfaceRealization");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getComponentImplAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleLifeCycleMethod
entryRuleLifeCycleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLifeCycleMethodRule()); }
	 iv_ruleLifeCycleMethod=ruleLifeCycleMethod 
	 { $current=$iv_ruleLifeCycleMethod.current; } 
	 EOF 
;

// Rule LifeCycleMethod
ruleLifeCycleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='action' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLifeCycleMethodAccess().getActionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLifeCycleMethodAccess().getBodyBlockStatementParserRuleCall_1_0()); 
	    }
		lv_body_1_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLifeCycleMethodRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_1_0, 
        		"BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableDecl
entryRuleVariableDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclRule()); }
	 iv_ruleVariableDecl=ruleVariableDecl 
	 { $current=$iv_ruleVariableDecl.current; } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_modifier_0_1=	'var' 
    {
        newLeafNode(lv_modifier_0_1, grammarAccess.getVariableDeclAccess().getModifierVarKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclRule());
	        }
       		setWithLastConsumed($current, "modifier", lv_modifier_0_1, null);
	    }

    |		lv_modifier_0_2=	'val' 
    {
        newLeafNode(lv_modifier_0_2, grammarAccess.getVariableDeclAccess().getModifierValKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclRule());
	        }
       		setWithLastConsumed($current, "modifier", lv_modifier_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclAccess().getTypeDeclarationTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleDeclarationTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"DeclarationTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getVariableDeclAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleConstantDecl
entryRuleConstantDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantDeclRule()); }
	 iv_ruleConstantDecl=ruleConstantDecl 
	 { $current=$iv_ruleConstantDecl.current; } 
	 EOF 
;

// Rule ConstantDecl
ruleConstantDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='const' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantDeclAccess().getConstKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantDeclAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantDeclAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantDeclAccess().getValueExpressionParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantDeclRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInterfaceRealization
entryRuleInterfaceRealization returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRealizationRule()); }
	 iv_ruleInterfaceRealization=ruleInterfaceRealization 
	 { $current=$iv_ruleInterfaceRealization.current; } 
	 EOF 
;

// Rule InterfaceRealization
ruleInterfaceRealization returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='iface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceRealizationAccess().getIfaceKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRealizationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInterfaceRealizationAccess().getRefInterfaceInterfaceCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceRealizationAccess().getMethodsMethodImplParserRuleCall_2_0()); 
	    }
		lv_methods_2_0=ruleMethodImpl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRealizationRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_2_0, 
        		"MethodImpl");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleMethodImpl
entryRuleMethodImpl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodImplRule()); }
	 iv_ruleMethodImpl=ruleMethodImpl 
	 { $current=$iv_ruleMethodImpl.current; } 
	 EOF 
;

// Rule MethodImpl
ruleMethodImpl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='operation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMethodImplAccess().getOperationKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodImplRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMethodImplAccess().getRefMethodMethodDeclCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodImplAccess().getBodyBlockStatementParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodImplRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0()); 
    }
    this_IfStatement_0=ruleIfStatement
    { 
        $current = $this_IfStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_1()); 
    }
    this_Assignment_1=ruleAssignment
    { 
        $current = $this_Assignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLoopStatementParserRuleCall_2()); 
    }
    this_LoopStatement_2=ruleLoopStatement
    { 
        $current = $this_LoopStatement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDataAccessStatementParserRuleCall_3()); 
    }
    this_DataAccessStatement_3=ruleDataAccessStatement
    { 
        $current = $this_DataAccessStatement_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getIfStatementBlockStatementParserRuleCall_4_0()); 
	    }
		lv_ifStatement_4_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"ifStatement",
        		lv_ifStatement_4_0, 
        		"BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementBlockStatementParserRuleCall_5_1_0()); 
	    }
		lv_elseStatement_6_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_6_0, 
        		"BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBlockStatement
entryRuleBlockStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockStatementRule()); }
	 iv_ruleBlockStatement=ruleBlockStatement 
	 { $current=$iv_ruleBlockStatement.current; } 
	 EOF 
;

// Rule BlockStatement
ruleBlockStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockStatementAccess().getBlockStatementAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockStatementAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockStatementAccess().getStatementsStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockStatementRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockStatementAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getVariableVariableCallParserRuleCall_0_0()); 
	    }
		lv_variable_0_0=ruleVariableCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"VariableCall");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLoopStatement
entryRuleLoopStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopStatementRule()); }
	 iv_ruleLoopStatement=ruleLoopStatement 
	 { $current=$iv_ruleLoopStatement.current; } 
	 EOF 
;

// Rule LoopStatement
ruleLoopStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoopStatementAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLoopStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopStatementAccess().getVariableVariableDeclParserRuleCall_2_0()); 
	    }
		lv_variable_2_0=ruleVariableDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopStatementRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_2_0, 
        		"VariableDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLoopStatementAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopStatementAccess().getExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLoopStatementAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopStatementAccess().getStatementBlockStatementParserRuleCall_6_0()); 
	    }
		lv_statement_6_0=ruleBlockStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_6_0, 
        		"BlockStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDataAccessStatement
entryRuleDataAccessStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataAccessStatementRule()); }
	 iv_ruleDataAccessStatement=ruleDataAccessStatement 
	 { $current=$iv_ruleDataAccessStatement.current; } 
	 EOF 
;

// Rule DataAccessStatement
ruleDataAccessStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDataAccessStatementAccess().getOperationDataAccessOperationEnumRuleCall_0_0()); 
	    }
		lv_operation_0_0=ruleDataAccessOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataAccessStatementRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_0_0, 
        		"DataAccessOperation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataAccessStatementRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getDataAccessStatementAccess().getVariableVariableDeclCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleVariableCall
entryRuleVariableCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableCallRule()); }
	 iv_ruleVariableCall=ruleVariableCall 
	 { $current=$iv_ruleVariableCall.current; } 
	 EOF 
;

// Rule VariableCall
ruleVariableCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableCallRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVariableCallAccess().getVariableVariableDeclCrossReference_0_0()); 
	}

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableCallAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableCallAccess().getIndexExpressionParserRuleCall_1_1_0()); 
	    }
		lv_index_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableCallRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableCallAccess().getRightSquareBracketKeyword_1_2());
    }
)?(	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableCallAccess().getFullStopKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableCallAccess().getSubPropertyPropertyCallParserRuleCall_2_1_0()); 
	    }
		lv_subProperty_5_0=rulePropertyCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableCallRule());
	        }
       		set(
       			$current, 
       			"subProperty",
        		lv_subProperty_5_0, 
        		"PropertyCall");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePropertyCall
entryRulePropertyCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyCallRule()); }
	 iv_rulePropertyCall=rulePropertyCall 
	 { $current=$iv_rulePropertyCall.current; } 
	 EOF 
;

// Rule PropertyCall
rulePropertyCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyCallRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getPropertyCallAccess().getPropertyPropertyCrossReference_0_0()); 
	}

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyCallAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyCallAccess().getIndexExpressionParserRuleCall_1_1_0()); 
	    }
		lv_index_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyCallRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropertyCallAccess().getRightSquareBracketKeyword_1_2());
    }
)?(	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropertyCallAccess().getFullStopKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyCallAccess().getSubPropertyPropertyCallParserRuleCall_2_1_0()); 
	    }
		lv_subProperty_5_0=rulePropertyCall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyCallRule());
	        }
       		set(
       			$current, 
       			"subProperty",
        		lv_subProperty_5_0, 
        		"PropertyCall");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'||' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_feature_2_0=	'||' 
    {
        newLeafNode(lv_feature_2_0, grammarAccess.getExpressionAccess().getFeatureVerticalLineVerticalLineKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_0, "||");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'&&' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_feature_2_0=	'&&' 
    {
        newLeafNode(lv_feature_2_0, grammarAccess.getAndExpressionAccess().getFeatureAmpersandAmpersandKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_0, "&&");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightRelationalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOtherExpressionParserRuleCall_0()); 
    }
    this_OtherExpression_0=ruleOtherExpression
    { 
        $current = $this_OtherExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'==' 
 

    |			'!=' 
 

    |			'>' 
 

    |			'<' 
 

    |			'>=' 
 

    |			'<=' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_feature_2_1=	'==' 
    {
        newLeafNode(lv_feature_2_1, grammarAccess.getRelationalExpressionAccess().getFeatureEqualsSignEqualsSignKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_1, null);
	    }

    |		lv_feature_2_2=	'!=' 
    {
        newLeafNode(lv_feature_2_2, grammarAccess.getRelationalExpressionAccess().getFeatureExclamationMarkEqualsSignKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_2, null);
	    }

    |		lv_feature_2_3=	'>' 
    {
        newLeafNode(lv_feature_2_3, grammarAccess.getRelationalExpressionAccess().getFeatureGreaterThanSignKeyword_1_0_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_3, null);
	    }

    |		lv_feature_2_4=	'<' 
    {
        newLeafNode(lv_feature_2_4, grammarAccess.getRelationalExpressionAccess().getFeatureLessThanSignKeyword_1_0_0_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_4, null);
	    }

    |		lv_feature_2_5=	'>=' 
    {
        newLeafNode(lv_feature_2_5, grammarAccess.getRelationalExpressionAccess().getFeatureGreaterThanSignEqualsSignKeyword_1_0_0_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_5, null);
	    }

    |		lv_feature_2_6=	'<=' 
    {
        newLeafNode(lv_feature_2_6, grammarAccess.getRelationalExpressionAccess().getFeatureLessThanSignEqualsSignKeyword_1_0_0_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_6, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightOtherExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleOtherExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"OtherExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOtherExpression
entryRuleOtherExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOtherExpressionRule()); }
	 iv_ruleOtherExpression=ruleOtherExpression 
	 { $current=$iv_ruleOtherExpression.current; } 
	 EOF 
;

// Rule OtherExpression
ruleOtherExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOtherExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'instanceof' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOtherExpressionAccess().getExpressionExpressionAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_feature_2_0=	'instanceof' 
    {
        newLeafNode(lv_feature_2_0, grammarAccess.getOtherExpressionAccess().getFeatureInstanceofKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOtherExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_0, "instanceof");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getOtherExpressionAccess().getTypeTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_type_3_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOtherExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'+' 
 

    |			'-' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_feature_2_1=	'+' 
    {
        newLeafNode(lv_feature_2_1, grammarAccess.getAdditiveExpressionAccess().getFeaturePlusSignKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_1, null);
	    }

    |		lv_feature_2_2=	'-' 
    {
        newLeafNode(lv_feature_2_2, grammarAccess.getAdditiveExpressionAccess().getFeatureHyphenMinusKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_2, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOperationParserRuleCall_0()); 
    }
    this_UnaryOperation_0=ruleUnaryOperation
    { 
        $current = $this_UnaryOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
(
	'*' 
 

    |			'/' 
 

    |			'%' 
 

    |			'**' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getExpressionLeftAction_1_0_0_0(),
            $current);
    }
)(
(
(
		lv_feature_2_1=	'*' 
    {
        newLeafNode(lv_feature_2_1, grammarAccess.getMultiplicativeExpressionAccess().getFeatureAsteriskKeyword_1_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_1, null);
	    }

    |		lv_feature_2_2=	'/' 
    {
        newLeafNode(lv_feature_2_2, grammarAccess.getMultiplicativeExpressionAccess().getFeatureSolidusKeyword_1_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_2, null);
	    }

    |		lv_feature_2_3=	'%' 
    {
        newLeafNode(lv_feature_2_3, grammarAccess.getMultiplicativeExpressionAccess().getFeaturePercentSignKeyword_1_0_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_3, null);
	    }

    |		lv_feature_2_4=	'**' 
    {
        newLeafNode(lv_feature_2_4, grammarAccess.getMultiplicativeExpressionAccess().getFeatureAsteriskAsteriskKeyword_1_0_0_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_4, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightUnaryOperationParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOperationRule()); }
	 iv_ruleUnaryOperation=ruleUnaryOperation 
	 { $current=$iv_ruleUnaryOperation.current; } 
	 EOF 
;

// Rule UnaryOperation
ruleUnaryOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryOperationAccess().getExpressionAction_0_0(),
            $current);
    }
)(
(
		lv_feature_1_0=	'!' 
    {
        newLeafNode(lv_feature_1_0, grammarAccess.getUnaryOperationAccess().getFeatureExclamationMarkKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryOperationRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_1_0, "!");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryOperationAccess().getOperandUnaryOperationParserRuleCall_0_2_0()); 
	    }
		lv_operand_2_0=ruleUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"UnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getUnaryOperationAccess().getCastedExpressionParserRuleCall_1()); 
    }
    this_CastedExpression_3=ruleCastedExpression
    { 
        $current = $this_CastedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCastedExpression
entryRuleCastedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastedExpressionRule()); }
	 iv_ruleCastedExpression=ruleCastedExpression 
	 { $current=$iv_ruleCastedExpression.current; } 
	 EOF 
;

// Rule CastedExpression
ruleCastedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCastedExpressionAccess().getPostfixOperationParserRuleCall_0()); 
    }
    this_PostfixOperation_0=rulePostfixOperation
    { 
        $current = $this_PostfixOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
	'as' 
 

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCastedExpressionAccess().getExpressionTargetAction_1_0_0_0(),
            $current);
    }
)(
(
		lv_feature_2_0=	'as' 
    {
        newLeafNode(lv_feature_2_0, grammarAccess.getCastedExpressionAccess().getFeatureAsKeyword_1_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCastedExpressionRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_0, "as");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getCastedExpressionAccess().getTypeTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_type_3_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastedExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePostfixOperation
entryRulePostfixOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostfixOperationRule()); }
	 iv_rulePostfixOperation=rulePostfixOperation 
	 { $current=$iv_rulePostfixOperation.current; } 
	 EOF 
;

// Rule PostfixOperation
rulePostfixOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPostfixOperationAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
(
	'++' 
 

    |			'--' 
 

)

)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPostfixOperationAccess().getExpressionOperandAction_1_0_0(),
            $current);
    }
)(
(
(
		lv_feature_2_1=	'++' 
    {
        newLeafNode(lv_feature_2_1, grammarAccess.getPostfixOperationAccess().getFeaturePlusSignPlusSignKeyword_1_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPostfixOperationRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_1, null);
	    }

    |		lv_feature_2_2=	'--' 
    {
        newLeafNode(lv_feature_2_2, grammarAccess.getPostfixOperationAccess().getFeatureHyphenMinusHyphenMinusKeyword_1_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPostfixOperationRule());
	        }
       		setWithLastConsumed($current, "feature", lv_feature_2_2, null);
	    }

)

)
)))?)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getInstantiationExpressionParserRuleCall_0()); 
    }
    this_InstantiationExpression_0=ruleInstantiationExpression
    { 
        $current = $this_InstantiationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableCallParserRuleCall_1()); 
    }
    this_VariableCall_1=ruleVariableCall
    { 
        $current = $this_VariableCall_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getDataQueryParserRuleCall_2()); 
    }
    this_DataQuery_2=ruleDataQuery
    { 
        $current = $this_DataQuery_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_3()); 
    }
    this_Literal_3=ruleLiteral
    { 
        $current = $this_Literal_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDataQuery
entryRuleDataQuery returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataQueryRule()); }
	 iv_ruleDataQuery=ruleDataQuery 
	 { $current=$iv_ruleDataQuery.current; } 
	 EOF 
;

// Rule DataQuery
ruleDataQuery returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='query' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataQueryAccess().getQueryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataQueryAccess().getTypeDeclarationTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleDeclarationTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataQueryRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"DeclarationTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_query_2_0=RULE_STRING
		{
			newLeafNode(lv_query_2_0, grammarAccess.getDataQueryAccess().getQuerySTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataQueryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"query",
        		lv_query_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleInstantiationExpression
entryRuleInstantiationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstantiationExpressionRule()); }
	 iv_ruleInstantiationExpression=ruleInstantiationExpression 
	 { $current=$iv_ruleInstantiationExpression.current; } 
	 EOF 
;

// Rule InstantiationExpression
ruleInstantiationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstantiationExpressionAccess().getNewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstantiationExpressionAccess().getTypeTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstantiationExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstantiationExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstantiationExpressionAccess().getParametersExpressionParserRuleCall_3_0()); 
	    }
		lv_parameters_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstantiationExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInstantiationExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleDeclarationTypeReference
entryRuleDeclarationTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationTypeReferenceRule()); }
	 iv_ruleDeclarationTypeReference=ruleDeclarationTypeReference 
	 { $current=$iv_ruleDeclarationTypeReference.current; } 
	 EOF 
;

// Rule DeclarationTypeReference
ruleDeclarationTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationTypeReferenceAccess().getTypeReferenceParserRuleCall_0()); 
    }
    this_TypeReference_0=ruleTypeReference
    { 
        $current = $this_TypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationTypeReferenceAccess().getCollectionTypeParserRuleCall_1()); 
    }
    this_CollectionType_1=ruleCollectionType
    { 
        $current = $this_CollectionType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationTypeReferenceAccess().getMapTypeParserRuleCall_2()); 
    }
    this_MapType_2=ruleMapType
    { 
        $current = $this_MapType_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypeReference
entryRuleTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeReferenceRule()); }
	 iv_ruleTypeReference=ruleTypeReference 
	 { $current=$iv_ruleTypeReference.current; } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTypeReferenceAccess().getReferenceNamedTypeCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleCollectionType
entryRuleCollectionType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectionTypeRule()); }
	 iv_ruleCollectionType=ruleCollectionType 
	 { $current=$iv_ruleCollectionType.current; } 
	 EOF 
;

// Rule CollectionType
ruleCollectionType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionTypeAccess().getReferenceTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_reference_0_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionTypeRule());
	        }
       		set(
       			$current, 
       			"reference",
        		lv_reference_0_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCollectionTypeAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		lv_size_2_0=RULE_INT
		{
			newLeafNode(lv_size_2_0, grammarAccess.getCollectionTypeAccess().getSizeINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_2_0, 
        		"INT");
	    }

)
)?	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectionTypeAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleMapType
entryRuleMapType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMapTypeRule()); }
	 iv_ruleMapType=ruleMapType 
	 { $current=$iv_ruleMapType.current; } 
	 EOF 
;

// Rule MapType
ruleMapType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMapTypeAccess().getReferenceTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_reference_0_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapTypeRule());
	        }
       		set(
       			$current, 
       			"reference",
        		lv_reference_0_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMapTypeAccess().getLessThanSignKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMapTypeAccess().getKeyTypeTypeReferenceParserRuleCall_2_0_0()); 
	    }
		lv_keyType_2_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMapTypeRule());
	        }
       		set(
       			$current, 
       			"keyType",
        		lv_keyType_2_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMapTypeAccess().getGreaterThanSignKeyword_2_1());
    }
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); 
    }
    this_BooleanLiteral_0=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_1()); 
    }
    this_NumberLiteral_1=ruleNumberLiteral
    { 
        $current = $this_NumberLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getCharLiteralParserRuleCall_2()); 
    }
    this_CharLiteral_2=ruleCharLiteral
    { 
        $current = $this_CharLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3()); 
    }
    this_StringLiteral_3=ruleStringLiteral
    { 
        $current = $this_StringLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleCharLiteral
entryRuleCharLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharLiteralRule()); }
	 iv_ruleCharLiteral=ruleCharLiteral 
	 { $current=$iv_ruleCharLiteral.current; } 
	 EOF 
;

// Rule CharLiteral
ruleCharLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_CHARACTER
		{
			newLeafNode(lv_value_0_0, grammarAccess.getCharLiteralAccess().getValueCHARACTERTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCharLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"CHARACTER");
	    }

)
)
;





// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	 iv_ruleNumberLiteral=ruleNumberLiteral 
	 { $current=$iv_ruleNumberLiteral.current; } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberLiteralAccess().getValueNUMBERParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleNUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanLiteralAccess().getValueBOOLEANParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleBOOLEAN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"BOOLEAN");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1_0()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); } 
	 iv_ruleBOOLEAN=ruleBOOLEAN 
	 { $current=$iv_ruleBOOLEAN.current.getText(); }  
	 EOF 
;

// Rule BOOLEAN
ruleBOOLEAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLEANAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLEANAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleNUMBER
entryRuleNUMBER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNUMBERRule()); } 
	 iv_ruleNUMBER=ruleNUMBER 
	 { $current=$iv_ruleNUMBER.current.getText(); }  
	 EOF 
;

// Rule NUMBER
ruleNUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNUMBERAccess().getPlusSignKeyword_0_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNUMBERAccess().getHyphenMinusKeyword_0_0_1()); 
    }
)?    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_0_1()); 
    }
)
    |(    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNUMBERAccess().getFullStopKeyword_1_1()); 
    }
    this_INT_5=RULE_INT    {
		$current.merge(this_INT_5);
    }

    { 
    newLeafNode(this_INT_5, grammarAccess.getNUMBERAccess().getINTTerminalRuleCall_1_2()); 
    }
))
    ;





// Rule ComponentKind
ruleComponentKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='stateless' 
	{
        $current = grammarAccess.getComponentKindAccess().getSTATELESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComponentKindAccess().getSTATELESSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='stateful' 
	{
        $current = grammarAccess.getComponentKindAccess().getSTATEFULEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComponentKindAccess().getSTATEFULEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='singleton' 
	{
        $current = grammarAccess.getComponentKindAccess().getSINGLETONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComponentKindAccess().getSINGLETONEnumLiteralDeclaration_2()); 
    }
));



// Rule DataAccessOperation
ruleDataAccessOperation returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='store' 
	{
        $current = grammarAccess.getDataAccessOperationAccess().getSTOREEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDataAccessOperationAccess().getSTOREEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='update' 
	{
        $current = grammarAccess.getDataAccessOperationAccess().getUPDATEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDataAccessOperationAccess().getUPDATEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='delete' 
	{
        $current = grammarAccess.getDataAccessOperationAccess().getDELETEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDataAccessOperationAccess().getDELETEEnumLiteralDeclaration_2()); 
    }
));



RULE_CHARACTER : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\''))) '\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


