/*
* generated by Xtext
*/
package org.spp.cocome.behavior.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BehaviorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BehaviorModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_2_0_0 = (RuleCall)cImportsAssignment_2_0.eContents().get(0);
		private final Assignment cRepositoriesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cRepositoriesRepositoryReferenceParserRuleCall_2_1_0 = (RuleCall)cRepositoriesAssignment_2_1.eContents().get(0);
		private final Assignment cComponentImplAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentImplComponentImplParserRuleCall_3_0 = (RuleCall)cComponentImplAssignment_3.eContents().get(0);
		
		//BehaviorModel:
		//	"package" name=QualifiedName (imports+=Import | repositories+=RepositoryReference)* componentImpl=ComponentImpl;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName (imports+=Import | repositories+=RepositoryReference)* componentImpl=ComponentImpl
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//(imports+=Import | repositories+=RepositoryReference)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//imports+=Import
		public Assignment getImportsAssignment_2_0() { return cImportsAssignment_2_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0_0() { return cImportsImportParserRuleCall_2_0_0; }

		//repositories+=RepositoryReference
		public Assignment getRepositoriesAssignment_2_1() { return cRepositoriesAssignment_2_1; }

		//RepositoryReference
		public RuleCall getRepositoriesRepositoryReferenceParserRuleCall_2_1_0() { return cRepositoriesRepositoryReferenceParserRuleCall_2_1_0; }

		//componentImpl=ComponentImpl
		public Assignment getComponentImplAssignment_3() { return cComponentImplAssignment_3; }

		//ComponentImpl
		public RuleCall getComponentImplComponentImplParserRuleCall_3_0() { return cComponentImplComponentImplParserRuleCall_3_0; }
	}

	public class RepositoryReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RepositoryReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepositoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReferenceSTRINGTerminalRuleCall_1_0 = (RuleCall)cReferenceAssignment_1.eContents().get(0);
		
		//RepositoryReference:
		//	"repository" reference=STRING;
		public ParserRule getRule() { return rule; }

		//"repository" reference=STRING
		public Group getGroup() { return cGroup; }

		//"repository"
		public Keyword getRepositoryKeyword_0() { return cRepositoryKeyword_0; }

		//reference=STRING
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//STRING
		public RuleCall getReferenceSTRINGTerminalRuleCall_1_0() { return cReferenceSTRINGTerminalRuleCall_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class ComponentImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRealizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindComponentKindEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cRefComponentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefComponentComponentCrossReference_2_0 = (CrossReference)cRefComponentAssignment_2.eContents().get(0);
		private final RuleCall cRefComponentComponentQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cRefComponentComponentCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLocalDeclarationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cLocalDeclarationsAlternatives_4_0 = (Alternatives)cLocalDeclarationsAssignment_4.eContents().get(0);
		private final RuleCall cLocalDeclarationsVariableDeclParserRuleCall_4_0_0 = (RuleCall)cLocalDeclarationsAlternatives_4_0.eContents().get(0);
		private final RuleCall cLocalDeclarationsConstantDeclParserRuleCall_4_0_1 = (RuleCall)cLocalDeclarationsAlternatives_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cPostConstructKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPostConstructAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPostConstructLifeCycleMethodParserRuleCall_5_1_0 = (RuleCall)cPostConstructAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPreDestroyKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPreDestroyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPreDestroyLifeCycleMethodParserRuleCall_6_1_0 = (RuleCall)cPreDestroyAssignment_6_1.eContents().get(0);
		private final Assignment cInterfacesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cInterfacesInterfaceRealizationParserRuleCall_7_0 = (RuleCall)cInterfacesAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		/// *
		// * Component structure
		// * / ComponentImpl:
		//	"realize" kind=ComponentKind? refComponent=[mapping::Component|QualifiedName] "{" localDeclarations+=(VariableDecl |
		//	ConstantDecl)* ("post-construct" postConstruct=LifeCycleMethod)? ("pre-destroy" preDestroy=LifeCycleMethod)?
		//	interfaces+=InterfaceRealization* "}";
		public ParserRule getRule() { return rule; }

		//"realize" kind=ComponentKind? refComponent=[mapping::Component|QualifiedName] "{" localDeclarations+=(VariableDecl |
		//ConstantDecl)* ("post-construct" postConstruct=LifeCycleMethod)? ("pre-destroy" preDestroy=LifeCycleMethod)?
		//interfaces+=InterfaceRealization* "}"
		public Group getGroup() { return cGroup; }

		//"realize"
		public Keyword getRealizeKeyword_0() { return cRealizeKeyword_0; }

		//kind=ComponentKind?
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }

		//ComponentKind
		public RuleCall getKindComponentKindEnumRuleCall_1_0() { return cKindComponentKindEnumRuleCall_1_0; }

		//refComponent=[mapping::Component|QualifiedName]
		public Assignment getRefComponentAssignment_2() { return cRefComponentAssignment_2; }

		//[mapping::Component|QualifiedName]
		public CrossReference getRefComponentComponentCrossReference_2_0() { return cRefComponentComponentCrossReference_2_0; }

		//QualifiedName
		public RuleCall getRefComponentComponentQualifiedNameParserRuleCall_2_0_1() { return cRefComponentComponentQualifiedNameParserRuleCall_2_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//localDeclarations+=(VariableDecl | ConstantDecl)*
		public Assignment getLocalDeclarationsAssignment_4() { return cLocalDeclarationsAssignment_4; }

		//VariableDecl | ConstantDecl
		public Alternatives getLocalDeclarationsAlternatives_4_0() { return cLocalDeclarationsAlternatives_4_0; }

		//VariableDecl
		public RuleCall getLocalDeclarationsVariableDeclParserRuleCall_4_0_0() { return cLocalDeclarationsVariableDeclParserRuleCall_4_0_0; }

		//ConstantDecl
		public RuleCall getLocalDeclarationsConstantDeclParserRuleCall_4_0_1() { return cLocalDeclarationsConstantDeclParserRuleCall_4_0_1; }

		//("post-construct" postConstruct=LifeCycleMethod)?
		public Group getGroup_5() { return cGroup_5; }

		//"post-construct"
		public Keyword getPostConstructKeyword_5_0() { return cPostConstructKeyword_5_0; }

		//postConstruct=LifeCycleMethod
		public Assignment getPostConstructAssignment_5_1() { return cPostConstructAssignment_5_1; }

		//LifeCycleMethod
		public RuleCall getPostConstructLifeCycleMethodParserRuleCall_5_1_0() { return cPostConstructLifeCycleMethodParserRuleCall_5_1_0; }

		//("pre-destroy" preDestroy=LifeCycleMethod)?
		public Group getGroup_6() { return cGroup_6; }

		//"pre-destroy"
		public Keyword getPreDestroyKeyword_6_0() { return cPreDestroyKeyword_6_0; }

		//preDestroy=LifeCycleMethod
		public Assignment getPreDestroyAssignment_6_1() { return cPreDestroyAssignment_6_1; }

		//LifeCycleMethod
		public RuleCall getPreDestroyLifeCycleMethodParserRuleCall_6_1_0() { return cPreDestroyLifeCycleMethodParserRuleCall_6_1_0; }

		//interfaces+=InterfaceRealization*
		public Assignment getInterfacesAssignment_7() { return cInterfacesAssignment_7; }

		//InterfaceRealization
		public RuleCall getInterfacesInterfaceRealizationParserRuleCall_7_0() { return cInterfacesInterfaceRealizationParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class LifeCycleMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LifeCycleMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyBlockStatementParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		
		//LifeCycleMethod:
		//	"action" body=BlockStatement;
		public ParserRule getRule() { return rule; }

		//"action" body=BlockStatement
		public Group getGroup() { return cGroup; }

		//"action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//body=BlockStatement
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//BlockStatement
		public RuleCall getBodyBlockStatementParserRuleCall_1_0() { return cBodyBlockStatementParserRuleCall_1_0; }
	}

	public class VariableDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cModifierAlternatives_0_0 = (Alternatives)cModifierAssignment_0.eContents().get(0);
		private final Keyword cModifierVarKeyword_0_0_0 = (Keyword)cModifierAlternatives_0_0.eContents().get(0);
		private final Keyword cModifierValKeyword_0_0_1 = (Keyword)cModifierAlternatives_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDeclarationTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//VariableDecl:
		//	modifier=("var" | "val") type=DeclarationTypeReference name=ID;
		public ParserRule getRule() { return rule; }

		//modifier=("var" | "val") type=DeclarationTypeReference name=ID
		public Group getGroup() { return cGroup; }

		//modifier=("var" | "val")
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//"var" | "val"
		public Alternatives getModifierAlternatives_0_0() { return cModifierAlternatives_0_0; }

		//"var"
		public Keyword getModifierVarKeyword_0_0_0() { return cModifierVarKeyword_0_0_0; }

		//"val"
		public Keyword getModifierValKeyword_0_0_1() { return cModifierValKeyword_0_0_1; }

		//type=DeclarationTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//DeclarationTypeReference
		public RuleCall getTypeDeclarationTypeReferenceParserRuleCall_1_0() { return cTypeDeclarationTypeReferenceParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ConstantDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ConstantDecl:
		//	"const" name=ID "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//"const" name=ID "=" value=Expression
		public Group getGroup() { return cGroup; }

		//"const"
		public Keyword getConstKeyword_0() { return cConstKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}

	public class InterfaceRealizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceRealization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefInterfaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefInterfaceInterfaceCrossReference_1_0 = (CrossReference)cRefInterfaceAssignment_1.eContents().get(0);
		private final RuleCall cRefInterfaceInterfaceQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cRefInterfaceInterfaceCrossReference_1_0.eContents().get(1);
		private final Assignment cMethodsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodsMethodImplParserRuleCall_2_0 = (RuleCall)cMethodsAssignment_2.eContents().get(0);
		
		//InterfaceRealization:
		//	"iface" refInterface=[mapping::Interface|QualifiedName] methods+=MethodImpl*;
		public ParserRule getRule() { return rule; }

		//"iface" refInterface=[mapping::Interface|QualifiedName] methods+=MethodImpl*
		public Group getGroup() { return cGroup; }

		//"iface"
		public Keyword getIfaceKeyword_0() { return cIfaceKeyword_0; }

		//refInterface=[mapping::Interface|QualifiedName]
		public Assignment getRefInterfaceAssignment_1() { return cRefInterfaceAssignment_1; }

		//[mapping::Interface|QualifiedName]
		public CrossReference getRefInterfaceInterfaceCrossReference_1_0() { return cRefInterfaceInterfaceCrossReference_1_0; }

		//QualifiedName
		public RuleCall getRefInterfaceInterfaceQualifiedNameParserRuleCall_1_0_1() { return cRefInterfaceInterfaceQualifiedNameParserRuleCall_1_0_1; }

		//methods+=MethodImpl*
		public Assignment getMethodsAssignment_2() { return cMethodsAssignment_2; }

		//MethodImpl
		public RuleCall getMethodsMethodImplParserRuleCall_2_0() { return cMethodsMethodImplParserRuleCall_2_0; }
	}

	public class MethodImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefMethodMethodDeclCrossReference_1_0 = (CrossReference)cRefMethodAssignment_1.eContents().get(0);
		private final RuleCall cRefMethodMethodDeclQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cRefMethodMethodDeclCrossReference_1_0.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockStatementParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//MethodImpl:
		//	"operation" refMethod=[mapping::MethodDecl|QualifiedName] body=BlockStatement;
		public ParserRule getRule() { return rule; }

		//"operation" refMethod=[mapping::MethodDecl|QualifiedName] body=BlockStatement
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//refMethod=[mapping::MethodDecl|QualifiedName]
		public Assignment getRefMethodAssignment_1() { return cRefMethodAssignment_1; }

		//[mapping::MethodDecl|QualifiedName]
		public CrossReference getRefMethodMethodDeclCrossReference_1_0() { return cRefMethodMethodDeclCrossReference_1_0; }

		//QualifiedName
		public RuleCall getRefMethodMethodDeclQualifiedNameParserRuleCall_1_0_1() { return cRefMethodMethodDeclQualifiedNameParserRuleCall_1_0_1; }

		//body=BlockStatement
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//BlockStatement
		public RuleCall getBodyBlockStatementParserRuleCall_2_0() { return cBodyBlockStatementParserRuleCall_2_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDataAccessStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement:
		//	IfStatement | Assignment | LoopStatement | DataAccessStatement;
		public ParserRule getRule() { return rule; }

		//IfStatement | Assignment | LoopStatement | DataAccessStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_1() { return cAssignmentParserRuleCall_1; }

		//LoopStatement
		public RuleCall getLoopStatementParserRuleCall_2() { return cLoopStatementParserRuleCall_2; }

		//DataAccessStatement
		public RuleCall getDataAccessStatementParserRuleCall_3() { return cDataAccessStatementParserRuleCall_3; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIfStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIfStatementBlockStatementParserRuleCall_4_0 = (RuleCall)cIfStatementAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementBlockStatementParserRuleCall_5_1_0 = (RuleCall)cElseStatementAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//	"if" "(" expr=Expression ")" ifStatement=BlockStatement ("else" elseStatement=BlockStatement)?;
		public ParserRule getRule() { return rule; }

		//"if" "(" expr=Expression ")" ifStatement=BlockStatement ("else" elseStatement=BlockStatement)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//ifStatement=BlockStatement
		public Assignment getIfStatementAssignment_4() { return cIfStatementAssignment_4; }

		//BlockStatement
		public RuleCall getIfStatementBlockStatementParserRuleCall_4_0() { return cIfStatementBlockStatementParserRuleCall_4_0; }

		//("else" elseStatement=BlockStatement)?
		public Group getGroup_5() { return cGroup_5; }

		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseStatement=BlockStatement
		public Assignment getElseStatementAssignment_5_1() { return cElseStatementAssignment_5_1; }

		//BlockStatement
		public RuleCall getElseStatementBlockStatementParserRuleCall_5_1_0() { return cElseStatementBlockStatementParserRuleCall_5_1_0; }
	}

	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockStatement:
		//	{BlockStatement} "{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//{BlockStatement} "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//{BlockStatement}
		public Action getBlockStatementAction_0() { return cBlockStatementAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableCallParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment:
		//	variable=VariableCall "=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//variable=VariableCall "=" expression=Expression
		public Group getGroup() { return cGroup; }

		//variable=VariableCall
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//VariableCall
		public RuleCall getVariableVariableCallParserRuleCall_0_0() { return cVariableVariableCallParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class LoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableDeclParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementBlockStatementParserRuleCall_6_0 = (RuleCall)cStatementAssignment_6.eContents().get(0);
		
		//LoopStatement:
		//	"for" "(" variable=VariableDecl ":" expression=Expression ")" statement=BlockStatement;
		public ParserRule getRule() { return rule; }

		//"for" "(" variable=VariableDecl ":" expression=Expression ")" statement=BlockStatement
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable=VariableDecl
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }

		//VariableDecl
		public RuleCall getVariableVariableDeclParserRuleCall_2_0() { return cVariableVariableDeclParserRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//statement=BlockStatement
		public Assignment getStatementAssignment_6() { return cStatementAssignment_6; }

		//BlockStatement
		public RuleCall getStatementBlockStatementParserRuleCall_6_0() { return cStatementBlockStatementParserRuleCall_6_0; }
	}

	public class DataAccessStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataAccessStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationDataAccessOperationEnumRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableVariableDeclCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVariableDeclIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVariableDeclCrossReference_1_0.eContents().get(1);
		
		//DataAccessStatement:
		//	operation=DataAccessOperation variable=[VariableDecl];
		public ParserRule getRule() { return rule; }

		//operation=DataAccessOperation variable=[VariableDecl]
		public Group getGroup() { return cGroup; }

		//operation=DataAccessOperation
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }

		//DataAccessOperation
		public RuleCall getOperationDataAccessOperationEnumRuleCall_0_0() { return cOperationDataAccessOperationEnumRuleCall_0_0; }

		//variable=[VariableDecl]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//[VariableDecl]
		public CrossReference getVariableVariableDeclCrossReference_1_0() { return cVariableVariableDeclCrossReference_1_0; }

		//ID
		public RuleCall getVariableVariableDeclIDTerminalRuleCall_1_0_1() { return cVariableVariableDeclIDTerminalRuleCall_1_0_1; }
	}

	public class VariableCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableDeclCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableDeclIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableVariableDeclCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexExpressionParserRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubPropertyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubPropertyPropertyCallParserRuleCall_2_1_0 = (RuleCall)cSubPropertyAssignment_2_1.eContents().get(0);
		
		//VariableCall:
		//	variable=[VariableDecl] ("[" index=Expression? "]")? ("." subProperty=PropertyCall)?;
		public ParserRule getRule() { return rule; }

		//variable=[VariableDecl] ("[" index=Expression? "]")? ("." subProperty=PropertyCall)?
		public Group getGroup() { return cGroup; }

		//variable=[VariableDecl]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//[VariableDecl]
		public CrossReference getVariableVariableDeclCrossReference_0_0() { return cVariableVariableDeclCrossReference_0_0; }

		//ID
		public RuleCall getVariableVariableDeclIDTerminalRuleCall_0_0_1() { return cVariableVariableDeclIDTerminalRuleCall_0_0_1; }

		//("[" index=Expression? "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//index=Expression?
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }

		//Expression
		public RuleCall getIndexExpressionParserRuleCall_1_1_0() { return cIndexExpressionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//("." subProperty=PropertyCall)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//subProperty=PropertyCall
		public Assignment getSubPropertyAssignment_2_1() { return cSubPropertyAssignment_2_1; }

		//PropertyCall
		public RuleCall getSubPropertyPropertyCallParserRuleCall_2_1_0() { return cSubPropertyPropertyCallParserRuleCall_2_1_0; }
	}

	public class PropertyCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPropertyPropertyCrossReference_0_0 = (CrossReference)cPropertyAssignment_0.eContents().get(0);
		private final RuleCall cPropertyPropertyIDTerminalRuleCall_0_0_1 = (RuleCall)cPropertyPropertyCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexExpressionParserRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubPropertyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubPropertyPropertyCallParserRuleCall_2_1_0 = (RuleCall)cSubPropertyAssignment_2_1.eContents().get(0);
		
		//PropertyCall:
		//	property=[types::Property] ("[" index=Expression? "]")? ("." subProperty=PropertyCall)?;
		public ParserRule getRule() { return rule; }

		//property=[types::Property] ("[" index=Expression? "]")? ("." subProperty=PropertyCall)?
		public Group getGroup() { return cGroup; }

		//property=[types::Property]
		public Assignment getPropertyAssignment_0() { return cPropertyAssignment_0; }

		//[types::Property]
		public CrossReference getPropertyPropertyCrossReference_0_0() { return cPropertyPropertyCrossReference_0_0; }

		//ID
		public RuleCall getPropertyPropertyIDTerminalRuleCall_0_0_1() { return cPropertyPropertyIDTerminalRuleCall_0_0_1; }

		//("[" index=Expression? "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//index=Expression?
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }

		//Expression
		public RuleCall getIndexExpressionParserRuleCall_1_1_0() { return cIndexExpressionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//("." subProperty=PropertyCall)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//subProperty=PropertyCall
		public Assignment getSubPropertyAssignment_2_1() { return cSubPropertyAssignment_2_1; }

		//PropertyCall
		public RuleCall getSubPropertyPropertyCallParserRuleCall_2_1_0() { return cSubPropertyPropertyCallParserRuleCall_2_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cFeatureVerticalLineVerticalLineKeyword_1_0_0_1_0 = (Keyword)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		/// *
		// * Expression grammar
		// * / Expression:
		//	AndExpression (=> ({Expression.left=current} feature="||") right=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//AndExpression (=> ({Expression.left=current} feature="||") right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//(=> ({Expression.left=current} feature="||") right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Expression.left=current} feature="||")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Expression.left=current} feature="||"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0_0_0() { return cExpressionLeftAction_1_0_0_0; }

		//feature="||"
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//"||"
		public Keyword getFeatureVerticalLineVerticalLineKeyword_1_0_0_1_0() { return cFeatureVerticalLineVerticalLineKeyword_1_0_0_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_1_0() { return cRightAndExpressionParserRuleCall_1_1_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cFeatureAmpersandAmpersandKeyword_1_0_0_1_0 = (Keyword)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//	RelationalExpression (=> ({Expression.left=current} feature="&&") right=RelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//RelationalExpression (=> ({Expression.left=current} feature="&&") right=RelationalExpression)*
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//(=> ({Expression.left=current} feature="&&") right=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Expression.left=current} feature="&&")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Expression.left=current} feature="&&"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0_0_0() { return cExpressionLeftAction_1_0_0_0; }

		//feature="&&"
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//"&&"
		public Keyword getFeatureAmpersandAmpersandKeyword_1_0_0_1_0() { return cFeatureAmpersandAmpersandKeyword_1_0_0_1_0; }

		//right=RelationalExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//RelationalExpression
		public RuleCall getRightRelationalExpressionParserRuleCall_1_1_0() { return cRightRelationalExpressionParserRuleCall_1_1_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOtherExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cFeatureAlternatives_1_0_0_1_0 = (Alternatives)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cFeatureEqualsSignEqualsSignKeyword_1_0_0_1_0_0 = (Keyword)cFeatureAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cFeatureExclamationMarkEqualsSignKeyword_1_0_0_1_0_1 = (Keyword)cFeatureAlternatives_1_0_0_1_0.eContents().get(1);
		private final Keyword cFeatureGreaterThanSignKeyword_1_0_0_1_0_2 = (Keyword)cFeatureAlternatives_1_0_0_1_0.eContents().get(2);
		private final Keyword cFeatureLessThanSignKeyword_1_0_0_1_0_3 = (Keyword)cFeatureAlternatives_1_0_0_1_0.eContents().get(3);
		private final Keyword cFeatureGreaterThanSignEqualsSignKeyword_1_0_0_1_0_4 = (Keyword)cFeatureAlternatives_1_0_0_1_0.eContents().get(4);
		private final Keyword cFeatureLessThanSignEqualsSignKeyword_1_0_0_1_0_5 = (Keyword)cFeatureAlternatives_1_0_0_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOtherExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpression returns Expression:
		//	OtherExpression (=> ({Expression.left=current} feature=("==" | "!=" | ">" | "<" | ">=" | "<="))
		//	right=OtherExpression)*;
		public ParserRule getRule() { return rule; }

		//OtherExpression (=> ({Expression.left=current} feature=("==" | "!=" | ">" | "<" | ">=" | "<=")) right=OtherExpression)*
		public Group getGroup() { return cGroup; }

		//OtherExpression
		public RuleCall getOtherExpressionParserRuleCall_0() { return cOtherExpressionParserRuleCall_0; }

		//(=> ({Expression.left=current} feature=("==" | "!=" | ">" | "<" | ">=" | "<=")) right=OtherExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Expression.left=current} feature=("==" | "!=" | ">" | "<" | ">=" | "<="))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Expression.left=current} feature=("==" | "!=" | ">" | "<" | ">=" | "<=")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0_0_0() { return cExpressionLeftAction_1_0_0_0; }

		//feature=("==" | "!=" | ">" | "<" | ">=" | "<=")
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//"==" | "!=" | ">" | "<" | ">=" | "<="
		public Alternatives getFeatureAlternatives_1_0_0_1_0() { return cFeatureAlternatives_1_0_0_1_0; }

		//"=="
		public Keyword getFeatureEqualsSignEqualsSignKeyword_1_0_0_1_0_0() { return cFeatureEqualsSignEqualsSignKeyword_1_0_0_1_0_0; }

		//"!="
		public Keyword getFeatureExclamationMarkEqualsSignKeyword_1_0_0_1_0_1() { return cFeatureExclamationMarkEqualsSignKeyword_1_0_0_1_0_1; }

		//">"
		public Keyword getFeatureGreaterThanSignKeyword_1_0_0_1_0_2() { return cFeatureGreaterThanSignKeyword_1_0_0_1_0_2; }

		//"<"
		public Keyword getFeatureLessThanSignKeyword_1_0_0_1_0_3() { return cFeatureLessThanSignKeyword_1_0_0_1_0_3; }

		//">="
		public Keyword getFeatureGreaterThanSignEqualsSignKeyword_1_0_0_1_0_4() { return cFeatureGreaterThanSignEqualsSignKeyword_1_0_0_1_0_4; }

		//"<="
		public Keyword getFeatureLessThanSignEqualsSignKeyword_1_0_0_1_0_5() { return cFeatureLessThanSignEqualsSignKeyword_1_0_0_1_0_5; }

		//right=OtherExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//OtherExpression
		public RuleCall getRightOtherExpressionParserRuleCall_1_1_0() { return cRightOtherExpressionParserRuleCall_1_1_0; }
	}

	public class OtherExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionExpressionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cFeatureInstanceofKeyword_1_0_0_1_0 = (Keyword)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//OtherExpression returns Expression:
		//	AdditiveExpression (=> ({Expression.expression=current} feature="instanceof") type=TypeReference)?;
		public ParserRule getRule() { return rule; }

		//AdditiveExpression (=> ({Expression.expression=current} feature="instanceof") type=TypeReference)?
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//(=> ({Expression.expression=current} feature="instanceof") type=TypeReference)?
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Expression.expression=current} feature="instanceof")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Expression.expression=current} feature="instanceof"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Expression.expression=current}
		public Action getExpressionExpressionAction_1_0_0_0() { return cExpressionExpressionAction_1_0_0_0; }

		//feature="instanceof"
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//"instanceof"
		public Keyword getFeatureInstanceofKeyword_1_0_0_1_0() { return cFeatureInstanceofKeyword_1_0_0_1_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_1_1_0() { return cTypeTypeReferenceParserRuleCall_1_1_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cFeatureAlternatives_1_0_0_1_0 = (Alternatives)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cFeaturePlusSignKeyword_1_0_0_1_0_0 = (Keyword)cFeatureAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cFeatureHyphenMinusKeyword_1_0_0_1_0_1 = (Keyword)cFeatureAlternatives_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AdditiveExpression returns Expression:
		//	MultiplicativeExpression (=> ({Expression.left=current} feature=("+" | "-")) right=MultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//MultiplicativeExpression (=> ({Expression.left=current} feature=("+" | "-")) right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//(=> ({Expression.left=current} feature=("+" | "-")) right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Expression.left=current} feature=("+" | "-"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Expression.left=current} feature=("+" | "-")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0_0_0() { return cExpressionLeftAction_1_0_0_0; }

		//feature=("+" | "-")
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//"+" | "-"
		public Alternatives getFeatureAlternatives_1_0_0_1_0() { return cFeatureAlternatives_1_0_0_1_0; }

		//"+"
		public Keyword getFeaturePlusSignKeyword_1_0_0_1_0_0() { return cFeaturePlusSignKeyword_1_0_0_1_0_0; }

		//"-"
		public Keyword getFeatureHyphenMinusKeyword_1_0_0_1_0_1() { return cFeatureHyphenMinusKeyword_1_0_0_1_0_1; }

		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Alternatives cFeatureAlternatives_1_0_0_1_0 = (Alternatives)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Keyword cFeatureAsteriskKeyword_1_0_0_1_0_0 = (Keyword)cFeatureAlternatives_1_0_0_1_0.eContents().get(0);
		private final Keyword cFeatureSolidusKeyword_1_0_0_1_0_1 = (Keyword)cFeatureAlternatives_1_0_0_1_0.eContents().get(1);
		private final Keyword cFeaturePercentSignKeyword_1_0_0_1_0_2 = (Keyword)cFeatureAlternatives_1_0_0_1_0.eContents().get(2);
		private final Keyword cFeatureAsteriskAsteriskKeyword_1_0_0_1_0_3 = (Keyword)cFeatureAlternatives_1_0_0_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnaryOperationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression returns Expression:
		//	UnaryOperation (=> ({Expression.left=current} feature=("*" | "/" | "%" | "**")) right=UnaryOperation)*;
		public ParserRule getRule() { return rule; }

		//UnaryOperation (=> ({Expression.left=current} feature=("*" | "/" | "%" | "**")) right=UnaryOperation)*
		public Group getGroup() { return cGroup; }

		//UnaryOperation
		public RuleCall getUnaryOperationParserRuleCall_0() { return cUnaryOperationParserRuleCall_0; }

		//(=> ({Expression.left=current} feature=("*" | "/" | "%" | "**")) right=UnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Expression.left=current} feature=("*" | "/" | "%" | "**"))
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Expression.left=current} feature=("*" | "/" | "%" | "**")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0_0_0() { return cExpressionLeftAction_1_0_0_0; }

		//feature=("*" | "/" | "%" | "**")
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//"*" | "/" | "%" | "**"
		public Alternatives getFeatureAlternatives_1_0_0_1_0() { return cFeatureAlternatives_1_0_0_1_0; }

		//"*"
		public Keyword getFeatureAsteriskKeyword_1_0_0_1_0_0() { return cFeatureAsteriskKeyword_1_0_0_1_0_0; }

		//"/"
		public Keyword getFeatureSolidusKeyword_1_0_0_1_0_1() { return cFeatureSolidusKeyword_1_0_0_1_0_1; }

		//"%"
		public Keyword getFeaturePercentSignKeyword_1_0_0_1_0_2() { return cFeaturePercentSignKeyword_1_0_0_1_0_2; }

		//"**"
		public Keyword getFeatureAsteriskAsteriskKeyword_1_0_0_1_0_3() { return cFeatureAsteriskAsteriskKeyword_1_0_0_1_0_3; }

		//right=UnaryOperation
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnaryOperation
		public RuleCall getRightUnaryOperationParserRuleCall_1_1_0() { return cRightUnaryOperationParserRuleCall_1_1_0; }
	}

	public class UnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cFeatureExclamationMarkKeyword_0_1_0 = (Keyword)cFeatureAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandUnaryOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cCastedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryOperation returns Expression:
		//	{Expression} feature="!" operand=UnaryOperation | CastedExpression;
		public ParserRule getRule() { return rule; }

		//{Expression} feature="!" operand=UnaryOperation | CastedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Expression} feature="!" operand=UnaryOperation
		public Group getGroup_0() { return cGroup_0; }

		//{Expression}
		public Action getExpressionAction_0_0() { return cExpressionAction_0_0; }

		//feature="!"
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//"!"
		public Keyword getFeatureExclamationMarkKeyword_0_1_0() { return cFeatureExclamationMarkKeyword_0_1_0; }

		//operand=UnaryOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//UnaryOperation
		public RuleCall getOperandUnaryOperationParserRuleCall_0_2_0() { return cOperandUnaryOperationParserRuleCall_0_2_0; }

		//CastedExpression
		public RuleCall getCastedExpressionParserRuleCall_1() { return cCastedExpressionParserRuleCall_1; }
	}

	public class CastedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CastedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPostfixOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpressionTargetAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cFeatureAsKeyword_1_0_0_1_0 = (Keyword)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//CastedExpression returns Expression:
		//	PostfixOperation (=> ({Expression.target=current} feature="as") type=TypeReference)*;
		public ParserRule getRule() { return rule; }

		//PostfixOperation (=> ({Expression.target=current} feature="as") type=TypeReference)*
		public Group getGroup() { return cGroup; }

		//PostfixOperation
		public RuleCall getPostfixOperationParserRuleCall_0() { return cPostfixOperationParserRuleCall_0; }

		//(=> ({Expression.target=current} feature="as") type=TypeReference)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({Expression.target=current} feature="as")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Expression.target=current} feature="as"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Expression.target=current}
		public Action getExpressionTargetAction_1_0_0_0() { return cExpressionTargetAction_1_0_0_0; }

		//feature="as"
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//"as"
		public Keyword getFeatureAsKeyword_1_0_0_1_0() { return cFeatureAsKeyword_1_0_0_1_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_1_1_0() { return cTypeTypeReferenceParserRuleCall_1_1_0; }
	}

	public class PostfixOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostfixOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExpressionOperandAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cFeatureAlternatives_1_0_1_0 = (Alternatives)cFeatureAssignment_1_0_1.eContents().get(0);
		private final Keyword cFeaturePlusSignPlusSignKeyword_1_0_1_0_0 = (Keyword)cFeatureAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cFeatureHyphenMinusHyphenMinusKeyword_1_0_1_0_1 = (Keyword)cFeatureAlternatives_1_0_1_0.eContents().get(1);
		
		//PostfixOperation returns Expression:
		//	PrimaryExpression => ({Expression.operand=current} feature=("++" | "--"))?;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression => ({Expression.operand=current} feature=("++" | "--"))?
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//=> ({Expression.operand=current} feature=("++" | "--"))?
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.operand=current} feature=("++" | "--")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Expression.operand=current}
		public Action getExpressionOperandAction_1_0_0() { return cExpressionOperandAction_1_0_0; }

		//feature=("++" | "--")
		public Assignment getFeatureAssignment_1_0_1() { return cFeatureAssignment_1_0_1; }

		//"++" | "--"
		public Alternatives getFeatureAlternatives_1_0_1_0() { return cFeatureAlternatives_1_0_1_0; }

		//"++"
		public Keyword getFeaturePlusSignPlusSignKeyword_1_0_1_0_0() { return cFeaturePlusSignPlusSignKeyword_1_0_1_0_0; }

		//"--"
		public Keyword getFeatureHyphenMinusHyphenMinusKeyword_1_0_1_0_1() { return cFeatureHyphenMinusHyphenMinusKeyword_1_0_1_0_1; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstantiationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDataQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimaryExpression returns Expression:
		//	InstantiationExpression | VariableCall | DataQuery | Literal;
		public ParserRule getRule() { return rule; }

		//InstantiationExpression | VariableCall | DataQuery | Literal
		public Alternatives getAlternatives() { return cAlternatives; }

		//InstantiationExpression
		public RuleCall getInstantiationExpressionParserRuleCall_0() { return cInstantiationExpressionParserRuleCall_0; }

		//VariableCall
		public RuleCall getVariableCallParserRuleCall_1() { return cVariableCallParserRuleCall_1; }

		//DataQuery
		public RuleCall getDataQueryParserRuleCall_2() { return cDataQueryParserRuleCall_2; }

		//Literal
		public RuleCall getLiteralParserRuleCall_3() { return cLiteralParserRuleCall_3; }
	}

	public class DataQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDeclarationTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuerySTRINGTerminalRuleCall_2_0 = (RuleCall)cQueryAssignment_2.eContents().get(0);
		
		//DataQuery:
		//	"query" type=DeclarationTypeReference query=STRING;
		public ParserRule getRule() { return rule; }

		//"query" type=DeclarationTypeReference query=STRING
		public Group getGroup() { return cGroup; }

		//"query"
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }

		//type=DeclarationTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//DeclarationTypeReference
		public RuleCall getTypeDeclarationTypeReferenceParserRuleCall_1_0() { return cTypeDeclarationTypeReferenceParserRuleCall_1_0; }

		//query=STRING
		public Assignment getQueryAssignment_2() { return cQueryAssignment_2; }

		//STRING
		public RuleCall getQuerySTRINGTerminalRuleCall_2_0() { return cQuerySTRINGTerminalRuleCall_2_0; }
	}

	public class InstantiationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstantiationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersExpressionParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InstantiationExpression:
		//	"new" type=TypeReference "(" parameters+=Expression ")";
		public ParserRule getRule() { return rule; }

		//"new" type=TypeReference "(" parameters+=Expression ")"
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=TypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_1_0() { return cTypeTypeReferenceParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters+=Expression
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_3_0() { return cParametersExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class DeclarationTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclarationTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCollectionTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMapTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DeclarationTypeReference:
		//	TypeReference | CollectionType | MapType;
		public ParserRule getRule() { return rule; }

		//TypeReference | CollectionType | MapType
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeReference
		public RuleCall getTypeReferenceParserRuleCall_0() { return cTypeReferenceParserRuleCall_0; }

		//CollectionType
		public RuleCall getCollectionTypeParserRuleCall_1() { return cCollectionTypeParserRuleCall_1; }

		//MapType
		public RuleCall getMapTypeParserRuleCall_2() { return cMapTypeParserRuleCall_2; }
	}

	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReference");
		private final Assignment cReferenceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cReferenceNamedTypeCrossReference_0 = (CrossReference)cReferenceAssignment.eContents().get(0);
		private final RuleCall cReferenceNamedTypeIDTerminalRuleCall_0_1 = (RuleCall)cReferenceNamedTypeCrossReference_0.eContents().get(1);
		
		/// *
		// * Typing stuff could be borrowed from types. 
		// * / TypeReference:
		//	reference=[types::NamedType];
		public ParserRule getRule() { return rule; }

		//reference=[types::NamedType]
		public Assignment getReferenceAssignment() { return cReferenceAssignment; }

		//[types::NamedType]
		public CrossReference getReferenceNamedTypeCrossReference_0() { return cReferenceNamedTypeCrossReference_0; }

		//ID
		public RuleCall getReferenceNamedTypeIDTerminalRuleCall_0_1() { return cReferenceNamedTypeIDTerminalRuleCall_0_1; }
	}

	public class CollectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CollectionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceTypeReferenceParserRuleCall_0_0 = (RuleCall)cReferenceAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeINTTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// * single dimensional collection type, no size results in an unbound collection * / CollectionType:
		//	reference=TypeReference "[" size=INT? "]";
		public ParserRule getRule() { return rule; }

		//reference=TypeReference "[" size=INT? "]"
		public Group getGroup() { return cGroup; }

		//reference=TypeReference
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//TypeReference
		public RuleCall getReferenceTypeReferenceParserRuleCall_0_0() { return cReferenceTypeReferenceParserRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//size=INT?
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_0() { return cSizeINTTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class MapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceTypeReferenceParserRuleCall_0_0 = (RuleCall)cReferenceAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cKeyTypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cKeyTypeTypeReferenceParserRuleCall_2_0_0 = (RuleCall)cKeyTypeAssignment_2_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//MapType:
		//	reference=TypeReference "<" (keyType=TypeReference ">");
		public ParserRule getRule() { return rule; }

		//reference=TypeReference "<" (keyType=TypeReference ">")
		public Group getGroup() { return cGroup; }

		//reference=TypeReference
		public Assignment getReferenceAssignment_0() { return cReferenceAssignment_0; }

		//TypeReference
		public RuleCall getReferenceTypeReferenceParserRuleCall_0_0() { return cReferenceTypeReferenceParserRuleCall_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//keyType=TypeReference ">"
		public Group getGroup_2() { return cGroup_2; }

		//keyType=TypeReference
		public Assignment getKeyTypeAssignment_2_0() { return cKeyTypeAssignment_2_0; }

		//TypeReference
		public RuleCall getKeyTypeTypeReferenceParserRuleCall_2_0_0() { return cKeyTypeTypeReferenceParserRuleCall_2_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_1() { return cGreaterThanSignKeyword_2_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// *
		// * Literals
		// * / Literal:
		//	BooleanLiteral | NumberLiteral | CharLiteral | StringLiteral;
		public ParserRule getRule() { return rule; }

		//BooleanLiteral | NumberLiteral | CharLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }

		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_1() { return cNumberLiteralParserRuleCall_1; }

		//CharLiteral
		public RuleCall getCharLiteralParserRuleCall_2() { return cCharLiteralParserRuleCall_2; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class CharLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CharLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCHARACTERTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//CharLiteral:
		//	value=CHARACTER;
		public ParserRule getRule() { return rule; }

		//value=CHARACTER
		public Assignment getValueAssignment() { return cValueAssignment; }

		//CHARACTER
		public RuleCall getValueCHARACTERTerminalRuleCall_0() { return cValueCHARACTERTerminalRuleCall_0; }
	}

	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNUMBERParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberLiteral:
		//	value=NUMBER;
		public ParserRule getRule() { return rule; }

		//value=NUMBER
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NUMBER
		public RuleCall getValueNUMBERParserRuleCall_0() { return cValueNUMBERParserRuleCall_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLEANParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral:
		//	value=BOOLEAN;
		public ParserRule getRule() { return rule; }

		//value=BOOLEAN
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOLEAN
		public RuleCall getValueBOOLEANParserRuleCall_0() { return cValueBOOLEANParserRuleCall_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		/// *
		// * special rules
		// * / QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//NUMBER:
		//	("+" | "-")? INT | INT "." INT;
		public ParserRule getRule() { return rule; }

		//("+" | "-")? INT | INT "." INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//("+" | "-")? INT
		public Group getGroup_0() { return cGroup_0; }

		//("+" | "-")?
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0_0() { return cPlusSignKeyword_0_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_0_1() { return cHyphenMinusKeyword_0_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }

		//INT "." INT
		public Group getGroup_1() { return cGroup_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}
	
	
	public class ComponentKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTATELESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTATELESSStatelessKeyword_0_0 = (Keyword)cSTATELESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTATEFULEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTATEFULStatefulKeyword_1_0 = (Keyword)cSTATEFULEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSINGLETONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSINGLETONSingletonKeyword_2_0 = (Keyword)cSINGLETONEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ComponentKind:
		//	STATELESS="stateless" | STATEFUL="stateful" | SINGLETON="singleton";
		public EnumRule getRule() { return rule; }

		//STATELESS="stateless" | STATEFUL="stateful" | SINGLETON="singleton"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STATELESS="stateless"
		public EnumLiteralDeclaration getSTATELESSEnumLiteralDeclaration_0() { return cSTATELESSEnumLiteralDeclaration_0; }

		//"stateless"
		public Keyword getSTATELESSStatelessKeyword_0_0() { return cSTATELESSStatelessKeyword_0_0; }

		//STATEFUL="stateful"
		public EnumLiteralDeclaration getSTATEFULEnumLiteralDeclaration_1() { return cSTATEFULEnumLiteralDeclaration_1; }

		//"stateful"
		public Keyword getSTATEFULStatefulKeyword_1_0() { return cSTATEFULStatefulKeyword_1_0; }

		//SINGLETON="singleton"
		public EnumLiteralDeclaration getSINGLETONEnumLiteralDeclaration_2() { return cSINGLETONEnumLiteralDeclaration_2; }

		//"singleton"
		public Keyword getSINGLETONSingletonKeyword_2_0() { return cSINGLETONSingletonKeyword_2_0; }
	}

	public class DataAccessOperationElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataAccessOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTOREEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTOREStoreKeyword_0_0 = (Keyword)cSTOREEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUPDATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUPDATEUpdateKeyword_1_0 = (Keyword)cUPDATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDELETEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDELETEDeleteKeyword_2_0 = (Keyword)cDELETEEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DataAccessOperation:
		//	STORE="store" | UPDATE="update" | DELETE="delete";
		public EnumRule getRule() { return rule; }

		//STORE="store" | UPDATE="update" | DELETE="delete"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STORE="store"
		public EnumLiteralDeclaration getSTOREEnumLiteralDeclaration_0() { return cSTOREEnumLiteralDeclaration_0; }

		//"store"
		public Keyword getSTOREStoreKeyword_0_0() { return cSTOREStoreKeyword_0_0; }

		//UPDATE="update"
		public EnumLiteralDeclaration getUPDATEEnumLiteralDeclaration_1() { return cUPDATEEnumLiteralDeclaration_1; }

		//"update"
		public Keyword getUPDATEUpdateKeyword_1_0() { return cUPDATEUpdateKeyword_1_0; }

		//DELETE="delete"
		public EnumLiteralDeclaration getDELETEEnumLiteralDeclaration_2() { return cDELETEEnumLiteralDeclaration_2; }

		//"delete"
		public Keyword getDELETEDeleteKeyword_2_0() { return cDELETEDeleteKeyword_2_0; }
	}
	
	private final BehaviorModelElements pBehaviorModel;
	private final RepositoryReferenceElements pRepositoryReference;
	private final ImportElements pImport;
	private final ComponentImplElements pComponentImpl;
	private final LifeCycleMethodElements pLifeCycleMethod;
	private final ComponentKindElements unknownRuleComponentKind;
	private final VariableDeclElements pVariableDecl;
	private final ConstantDeclElements pConstantDecl;
	private final InterfaceRealizationElements pInterfaceRealization;
	private final MethodImplElements pMethodImpl;
	private final StatementElements pStatement;
	private final IfStatementElements pIfStatement;
	private final BlockStatementElements pBlockStatement;
	private final AssignmentElements pAssignment;
	private final LoopStatementElements pLoopStatement;
	private final DataAccessStatementElements pDataAccessStatement;
	private final DataAccessOperationElements unknownRuleDataAccessOperation;
	private final VariableCallElements pVariableCall;
	private final PropertyCallElements pPropertyCall;
	private final ExpressionElements pExpression;
	private final AndExpressionElements pAndExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final OtherExpressionElements pOtherExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final UnaryOperationElements pUnaryOperation;
	private final CastedExpressionElements pCastedExpression;
	private final PostfixOperationElements pPostfixOperation;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final DataQueryElements pDataQuery;
	private final InstantiationExpressionElements pInstantiationExpression;
	private final DeclarationTypeReferenceElements pDeclarationTypeReference;
	private final TypeReferenceElements pTypeReference;
	private final CollectionTypeElements pCollectionType;
	private final MapTypeElements pMapType;
	private final LiteralElements pLiteral;
	private final StringLiteralElements pStringLiteral;
	private final CharLiteralElements pCharLiteral;
	private final NumberLiteralElements pNumberLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final BOOLEANElements pBOOLEAN;
	private final NUMBERElements pNUMBER;
	private final TerminalRule tCHARACTER;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BehaviorGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBehaviorModel = new BehaviorModelElements();
		this.pRepositoryReference = new RepositoryReferenceElements();
		this.pImport = new ImportElements();
		this.pComponentImpl = new ComponentImplElements();
		this.pLifeCycleMethod = new LifeCycleMethodElements();
		this.unknownRuleComponentKind = new ComponentKindElements();
		this.pVariableDecl = new VariableDeclElements();
		this.pConstantDecl = new ConstantDeclElements();
		this.pInterfaceRealization = new InterfaceRealizationElements();
		this.pMethodImpl = new MethodImplElements();
		this.pStatement = new StatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pBlockStatement = new BlockStatementElements();
		this.pAssignment = new AssignmentElements();
		this.pLoopStatement = new LoopStatementElements();
		this.pDataAccessStatement = new DataAccessStatementElements();
		this.unknownRuleDataAccessOperation = new DataAccessOperationElements();
		this.pVariableCall = new VariableCallElements();
		this.pPropertyCall = new PropertyCallElements();
		this.pExpression = new ExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pOtherExpression = new OtherExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pUnaryOperation = new UnaryOperationElements();
		this.pCastedExpression = new CastedExpressionElements();
		this.pPostfixOperation = new PostfixOperationElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pDataQuery = new DataQueryElements();
		this.pInstantiationExpression = new InstantiationExpressionElements();
		this.pDeclarationTypeReference = new DeclarationTypeReferenceElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pCollectionType = new CollectionTypeElements();
		this.pMapType = new MapTypeElements();
		this.pLiteral = new LiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pCharLiteral = new CharLiteralElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pBOOLEAN = new BOOLEANElements();
		this.pNUMBER = new NUMBERElements();
		this.tCHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHARACTER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.spp.cocome.behavior.Behavior".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BehaviorModel:
	//	"package" name=QualifiedName (imports+=Import | repositories+=RepositoryReference)* componentImpl=ComponentImpl;
	public BehaviorModelElements getBehaviorModelAccess() {
		return pBehaviorModel;
	}
	
	public ParserRule getBehaviorModelRule() {
		return getBehaviorModelAccess().getRule();
	}

	//RepositoryReference:
	//	"repository" reference=STRING;
	public RepositoryReferenceElements getRepositoryReferenceAccess() {
		return pRepositoryReference;
	}
	
	public ParserRule getRepositoryReferenceRule() {
		return getRepositoryReferenceAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	/// *
	// * Component structure
	// * / ComponentImpl:
	//	"realize" kind=ComponentKind? refComponent=[mapping::Component|QualifiedName] "{" localDeclarations+=(VariableDecl |
	//	ConstantDecl)* ("post-construct" postConstruct=LifeCycleMethod)? ("pre-destroy" preDestroy=LifeCycleMethod)?
	//	interfaces+=InterfaceRealization* "}";
	public ComponentImplElements getComponentImplAccess() {
		return pComponentImpl;
	}
	
	public ParserRule getComponentImplRule() {
		return getComponentImplAccess().getRule();
	}

	//LifeCycleMethod:
	//	"action" body=BlockStatement;
	public LifeCycleMethodElements getLifeCycleMethodAccess() {
		return pLifeCycleMethod;
	}
	
	public ParserRule getLifeCycleMethodRule() {
		return getLifeCycleMethodAccess().getRule();
	}

	//enum ComponentKind:
	//	STATELESS="stateless" | STATEFUL="stateful" | SINGLETON="singleton";
	public ComponentKindElements getComponentKindAccess() {
		return unknownRuleComponentKind;
	}
	
	public EnumRule getComponentKindRule() {
		return getComponentKindAccess().getRule();
	}

	//VariableDecl:
	//	modifier=("var" | "val") type=DeclarationTypeReference name=ID;
	public VariableDeclElements getVariableDeclAccess() {
		return pVariableDecl;
	}
	
	public ParserRule getVariableDeclRule() {
		return getVariableDeclAccess().getRule();
	}

	//ConstantDecl:
	//	"const" name=ID "=" value=Expression;
	public ConstantDeclElements getConstantDeclAccess() {
		return pConstantDecl;
	}
	
	public ParserRule getConstantDeclRule() {
		return getConstantDeclAccess().getRule();
	}

	//InterfaceRealization:
	//	"iface" refInterface=[mapping::Interface|QualifiedName] methods+=MethodImpl*;
	public InterfaceRealizationElements getInterfaceRealizationAccess() {
		return pInterfaceRealization;
	}
	
	public ParserRule getInterfaceRealizationRule() {
		return getInterfaceRealizationAccess().getRule();
	}

	//MethodImpl:
	//	"operation" refMethod=[mapping::MethodDecl|QualifiedName] body=BlockStatement;
	public MethodImplElements getMethodImplAccess() {
		return pMethodImpl;
	}
	
	public ParserRule getMethodImplRule() {
		return getMethodImplAccess().getRule();
	}

	//Statement:
	//	IfStatement | Assignment | LoopStatement | DataAccessStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//IfStatement:
	//	"if" "(" expr=Expression ")" ifStatement=BlockStatement ("else" elseStatement=BlockStatement)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//BlockStatement:
	//	{BlockStatement} "{" statements+=Statement* "}";
	public BlockStatementElements getBlockStatementAccess() {
		return pBlockStatement;
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}

	//Assignment:
	//	variable=VariableCall "=" expression=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//LoopStatement:
	//	"for" "(" variable=VariableDecl ":" expression=Expression ")" statement=BlockStatement;
	public LoopStatementElements getLoopStatementAccess() {
		return pLoopStatement;
	}
	
	public ParserRule getLoopStatementRule() {
		return getLoopStatementAccess().getRule();
	}

	//DataAccessStatement:
	//	operation=DataAccessOperation variable=[VariableDecl];
	public DataAccessStatementElements getDataAccessStatementAccess() {
		return pDataAccessStatement;
	}
	
	public ParserRule getDataAccessStatementRule() {
		return getDataAccessStatementAccess().getRule();
	}

	//enum DataAccessOperation:
	//	STORE="store" | UPDATE="update" | DELETE="delete";
	public DataAccessOperationElements getDataAccessOperationAccess() {
		return unknownRuleDataAccessOperation;
	}
	
	public EnumRule getDataAccessOperationRule() {
		return getDataAccessOperationAccess().getRule();
	}

	//VariableCall:
	//	variable=[VariableDecl] ("[" index=Expression? "]")? ("." subProperty=PropertyCall)?;
	public VariableCallElements getVariableCallAccess() {
		return pVariableCall;
	}
	
	public ParserRule getVariableCallRule() {
		return getVariableCallAccess().getRule();
	}

	//PropertyCall:
	//	property=[types::Property] ("[" index=Expression? "]")? ("." subProperty=PropertyCall)?;
	public PropertyCallElements getPropertyCallAccess() {
		return pPropertyCall;
	}
	
	public ParserRule getPropertyCallRule() {
		return getPropertyCallAccess().getRule();
	}

	/// *
	// * Expression grammar
	// * / Expression:
	//	AndExpression (=> ({Expression.left=current} feature="||") right=AndExpression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AndExpression returns Expression:
	//	RelationalExpression (=> ({Expression.left=current} feature="&&") right=RelationalExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//RelationalExpression returns Expression:
	//	OtherExpression (=> ({Expression.left=current} feature=("==" | "!=" | ">" | "<" | ">=" | "<="))
	//	right=OtherExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//OtherExpression returns Expression:
	//	AdditiveExpression (=> ({Expression.expression=current} feature="instanceof") type=TypeReference)?;
	public OtherExpressionElements getOtherExpressionAccess() {
		return pOtherExpression;
	}
	
	public ParserRule getOtherExpressionRule() {
		return getOtherExpressionAccess().getRule();
	}

	//AdditiveExpression returns Expression:
	//	MultiplicativeExpression (=> ({Expression.left=current} feature=("+" | "-")) right=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression returns Expression:
	//	UnaryOperation (=> ({Expression.left=current} feature=("*" | "/" | "%" | "**")) right=UnaryOperation)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//UnaryOperation returns Expression:
	//	{Expression} feature="!" operand=UnaryOperation | CastedExpression;
	public UnaryOperationElements getUnaryOperationAccess() {
		return pUnaryOperation;
	}
	
	public ParserRule getUnaryOperationRule() {
		return getUnaryOperationAccess().getRule();
	}

	//CastedExpression returns Expression:
	//	PostfixOperation (=> ({Expression.target=current} feature="as") type=TypeReference)*;
	public CastedExpressionElements getCastedExpressionAccess() {
		return pCastedExpression;
	}
	
	public ParserRule getCastedExpressionRule() {
		return getCastedExpressionAccess().getRule();
	}

	//PostfixOperation returns Expression:
	//	PrimaryExpression => ({Expression.operand=current} feature=("++" | "--"))?;
	public PostfixOperationElements getPostfixOperationAccess() {
		return pPostfixOperation;
	}
	
	public ParserRule getPostfixOperationRule() {
		return getPostfixOperationAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	InstantiationExpression | VariableCall | DataQuery | Literal;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//DataQuery:
	//	"query" type=DeclarationTypeReference query=STRING;
	public DataQueryElements getDataQueryAccess() {
		return pDataQuery;
	}
	
	public ParserRule getDataQueryRule() {
		return getDataQueryAccess().getRule();
	}

	//InstantiationExpression:
	//	"new" type=TypeReference "(" parameters+=Expression ")";
	public InstantiationExpressionElements getInstantiationExpressionAccess() {
		return pInstantiationExpression;
	}
	
	public ParserRule getInstantiationExpressionRule() {
		return getInstantiationExpressionAccess().getRule();
	}

	//DeclarationTypeReference:
	//	TypeReference | CollectionType | MapType;
	public DeclarationTypeReferenceElements getDeclarationTypeReferenceAccess() {
		return pDeclarationTypeReference;
	}
	
	public ParserRule getDeclarationTypeReferenceRule() {
		return getDeclarationTypeReferenceAccess().getRule();
	}

	/// *
	// * Typing stuff could be borrowed from types. 
	// * / TypeReference:
	//	reference=[types::NamedType];
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}

	/// * single dimensional collection type, no size results in an unbound collection * / CollectionType:
	//	reference=TypeReference "[" size=INT? "]";
	public CollectionTypeElements getCollectionTypeAccess() {
		return pCollectionType;
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}

	//MapType:
	//	reference=TypeReference "<" (keyType=TypeReference ">");
	public MapTypeElements getMapTypeAccess() {
		return pMapType;
	}
	
	public ParserRule getMapTypeRule() {
		return getMapTypeAccess().getRule();
	}

	/// *
	// * Literals
	// * / Literal:
	//	BooleanLiteral | NumberLiteral | CharLiteral | StringLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//CharLiteral:
	//	value=CHARACTER;
	public CharLiteralElements getCharLiteralAccess() {
		return pCharLiteral;
	}
	
	public ParserRule getCharLiteralRule() {
		return getCharLiteralAccess().getRule();
	}

	//NumberLiteral:
	//	value=NUMBER;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	value=BOOLEAN;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	/// *
	// * special rules
	// * / QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}

	//NUMBER:
	//	("+" | "-")? INT | INT "." INT;
	public NUMBERElements getNUMBERAccess() {
		return pNUMBER;
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//terminal CHARACTER:
	//	"\'" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'")) "\'";
	public TerminalRule getCHARACTERRule() {
		return tCHARACTER;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
