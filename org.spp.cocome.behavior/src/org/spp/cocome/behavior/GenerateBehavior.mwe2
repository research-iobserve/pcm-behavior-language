module org.spp.cocome.behavior.GenerateBehavior

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/spp/cocome/behavior/Behavior.xtext"
var fileExtensions = "bl"
var projectName = "org.spp.cocome.behavior"
var runtimeProject = "../${projectName}"
var generateXtendStub = true
var encoding = "UTF-8"

Workflow {
    bean = StandaloneSetup {
    	scanClassPath = true
    	platformUri = "${runtimeProject}/.."

    	registerGeneratedEPackage = "org.spp.cocome.types.types.TypesPackage"
    	registerGenModelFile = "platform:/resource/org.spp.cocome.types/src-gen/org/spp/cocome/types/Types.genmodel"
		
		uriMap = {
			from = "platform:/plugin/de.uka.ipd.sdq.stoex/model/stoex.genmodel"
			to = "platform:/resource/de.uka.ipd.sdq.stoex/model/stoex.genmodel"
		}
		
		uriMap = {
			from = "platform:/plugin/org.eclipse.uml2.codegen.ecore/model/GenModel.genmodel"
			to = "platform:/resource/org.eclipse.uml2.codegen.ecore/model/GenModel.genmodel"
		}
		
		uriMap = {
			from = "platform:/plugin/de.uka.ipd.sdq.identifier/model/identifier.genmodel"
			to = "platform:/resource/de.uka.ipd.sdq.identifier/model/identifier.genmodel"
		}
		
		uriMap = {
			from = "platform:/plugin/de.uka.ipd.sdq.probfunction/model/ProbabilityFunction.genmodel"
			to = "platform:/resource/de.uka.ipd.sdq.probfunction/model/ProbabilityFunction.genmodel"
		}
		
		uriMap = {
			from = "platform:/plugin/de.uka.ipd.sdq.units/model/Units.genmodel"
			to = "platform:/resource/de.uka.ipd.sdq.units/model/Units.genmodel"
		}
		
		uriMap = {
			from = "platform:/plugin/org.palladiosimulator.pcm/model/pcm.genmodel"
			to = "platform:/resource/org.palladiosimulator.pcm/model/pcm.genmodel"
		}
		
		//
		
		uriMap = {
			from = "platform:/plugin/de.uka.ipd.sdq.stoex/model/stoex.ecore"
			to = "platform:/resource/de.uka.ipd.sdq.stoex/model/stoex.ecore"
		}
		
		uriMap = {
			from = "platform:/plugin/org.eclipse.uml2.codegen.ecore/model/GenModel.ecore"
			to = "platform:/resource/org.eclipse.uml2.codegen.ecore/model/GenModel.ecore"
		}
		
		uriMap = {
			from = "platform:/plugin/de.uka.ipd.sdq.identifier/model/identifier.ecore"
			to = "platform:/resource/de.uka.ipd.sdq.identifier/model/identifier.ecore"
		}
		
		uriMap = {
			from = "platform:/plugin/de.uka.ipd.sdq.probfunction/model/ProbabilityFunction.ecore"
			to = "platform:/resource/de.uka.ipd.sdq.probfunction/model/ProbabilityFunction.ecore"
		}
		
		uriMap = {
			from = "platform:/plugin/de.uka.ipd.sdq.units/model/Units.ecore"
			to = "platform:/resource/de.uka.ipd.sdq.units/model/Units.ecore"
		}
		
		uriMap = {
			from = "platform:/plugin/org.palladiosimulator.pcm/model/pcm.ecore"
			to = "platform:/resource/org.palladiosimulator.pcm/model/pcm.ecore"
		}
		
		registerGeneratedEPackage = "org.eclipse.uml2.codegen.ecore.genmodel.GenModelPackage"
		
		registerGeneratedEPackage = "de.uka.ipd.sdq.stoex.StoexPackage"
		registerGenModelFile = "platform:/resource/de.uka.ipd.sdq.stoex/model/stoex.genmodel"
			
		registerGeneratedEPackage = "de.uka.ipd.sdq.identifier.IdentifierPackage"
		registerGenModelFile = "platform:/resource/de.uka.ipd.sdq.identifier/model/identifier.genmodel"
				
		registerGeneratedEPackage = "de.uka.ipd.sdq.probfunction.ProbfunctionPackage"
		registerGenModelFile = "platform:/resource/de.uka.ipd.sdq.probfunction/model/ProbabilityFunction.genmodel"

		registerGeneratedEPackage = "de.uka.ipd.sdq.units.UnitsPackage"
		registerGenModelFile = "platform:/resource/de.uka.ipd.sdq.units/model/Units.genmodel"

		registerGeneratedEPackage = "org.palladiosimulator.pcm.PcmPackage"
		registerGeneratedEPackage = "org.palladiosimulator.pcm.core.CorePackage"
		registerGeneratedEPackage = "org.palladiosimulator.pcm.repository.RepositoryPackage"
		
		registerGenModelFile = "platform:/resource/org.palladiosimulator.pcm/model/pcm.genmodel"

		registerGeneratedEPackage = "org.spp.cocome.behavior.mapping.MappingPackage"
		registerGenModelFile = "platform:/resource/org.spp.cocome.behavior/model/PCMMappingModel.genmodel"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}/src-gen"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}/model/generated"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}.ui/src-gen"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}.tests/src-gen"
    }
    
    component = Generator {
    	pathRtProject = runtimeProject
    	pathUiProject = "${runtimeProject}.ui"
    	pathTestProject = "${runtimeProject}.tests"
    	projectNameRt = projectName
    	projectNameUi = "${projectName}.ui"
    	encoding = encoding
    	language = auto-inject {
    		uri = grammarURI
    
    		// Java API to access grammar elements (required by several other fragments)
    		fragment = grammarAccess.GrammarAccessFragment auto-inject {}
    
    		// generates Java API for the generated EPackages
    		fragment = ecore.EMFGeneratorFragment auto-inject {}
    
    		// the old serialization component
    		// fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}    
    
    		// serializer 2.0
    		fragment = serializer.SerializerFragment auto-inject {
    			generateStub = false
    		}
    
    		// a custom ResourceFactory for use with EMF
    		fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
    
    		// The antlr parser generator fragment.
    		fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
    		//  options = {
    		//      backtrack = true
    		//  }
    		}
    
    		// Xtend-based API for validation
    		fragment = validation.ValidatorFragment auto-inject {
    		//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
    		//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
    		}
    
    		// old scoping and exporting API
    		// fragment = scoping.ImportURIScopingFragment auto-inject {}
    		// fragment = exporting.SimpleNamesFragment auto-inject {}
    
    		// scoping and exporting API
    		fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
    		fragment = exporting.QualifiedNamesFragment auto-inject {}
    		fragment = builder.BuilderIntegrationFragment auto-inject {}
    
    		// generator API
    		fragment = generator.GeneratorFragment auto-inject {}
    
    		// formatter API
    		fragment = formatting.FormatterFragment auto-inject {}
    
    		// labeling API
    		fragment = labeling.LabelProviderFragment auto-inject {}
    
    		// outline API
    		fragment = outline.OutlineTreeProviderFragment auto-inject {}
    		fragment = outline.QuickOutlineFragment auto-inject {}
    
    		// quickfix API
    		fragment = quickfix.QuickfixProviderFragment auto-inject {}
    
    		// content assist API
    		fragment = contentAssist.ContentAssistFragment auto-inject {}
    
    		// generates a more lightweight Antlr parser and lexer tailored for content assist
    		fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
    
    		// generates junit test support classes into Generator#pathTestProject
    		fragment = junit.Junit4Fragment auto-inject {}
    
    		// rename refactoring
    		fragment = refactoring.RefactorElementNameFragment auto-inject {}
    
    		// provides the necessary bindings for java types integration
    		fragment = types.TypesGeneratorFragment auto-inject {}
    
    		// generates the required bindings only if the grammar inherits from Xbase
    		fragment = xbase.XbaseGeneratorFragment auto-inject {}
    		
    		// generates the required bindings only if the grammar inherits from Xtype
    		fragment = xbase.XtypeGeneratorFragment auto-inject {}
    
    		// provides a preference page for template proposals
    		fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
    
    		// provides a compare view
    		fragment = compare.CompareFragment auto-inject {}
    	}
    }
}

