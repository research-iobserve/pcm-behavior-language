/*
 * generated by Xtext
 */
package org.spp.cocome.behavior.scoping

import org.spp.cocome.behavior.behavior.ComponentImpl
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.spp.cocome.behavior.behavior.InterfaceRealization
import org.spp.cocome.behavior.behavior.VariableCall
import org.spp.cocome.types.types.EntityType
import java.util.List
import java.util.ArrayList
import org.spp.cocome.behavior.behavior.TypeReference
import org.spp.cocome.behavior.behavior.CollectionType
import org.spp.cocome.behavior.behavior.MapType

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class BehaviorScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {

	/**
	 * PCM mapping model interface scope.
	 */
	def IScope scope_InterfaceRealization_refInterface(ComponentImpl context, EReference reference) {
		return Scopes.scopeFor(context.refComponent.interfaces)
	}
	
	/**
	 * PCM mapping model method scope.
	 */
	def IScope scope_MethodImpl_refMethod(InterfaceRealization context, EReference reference) {
		return Scopes.scopeFor(context.refInterface.methods)
	}
	
	def IScope scope_PropertyCall_property(VariableCall context, EReference reference) {
		val typeref = context.variable.type
		val baseTypeRef =
			if (typeref instanceof TypeReference) {
				(typeref as TypeReference).reference
			} else if (typeref instanceof CollectionType) {
				(typeref as CollectionType).reference.reference
			} else if (typeref instanceof MapType) {
				(typeref as MapType).reference.reference
			}
		if (baseTypeRef instanceof EntityType) {
			return Scopes.scopeFor((baseTypeRef as EntityType).collectAllProperties)
		} else 
			return IScope.NULLSCOPE
	}
	
	/**
	 * Collect all properties of an entity type.
	 */
	private def List<org.spp.cocome.types.types.Property> collectAllProperties(EntityType type) {
		val List<org.spp.cocome.types.types.Property> result = new ArrayList<org.spp.cocome.types.types.Property>()
		result.addAll(type.properties)
		if (type.parent != null) {
			if (type.parent instanceof EntityType) {
				result.addAll((type.parent as EntityType).collectAllProperties)
			}
		}
		return result
	}
	
}
